{"version":3,"sources":["utils/uint64.js","utils/constants.js","utils/api.js","components/Connect/Sollet/index.js","components/Connect/Phantom/index.js","components/Connect/index.js","components/Column/index.js","components/ExternalLink/index.js","components/SocialLinks/index.js","components/SocialLinks/constants.js","components/Row/index.js","components/FeeInputPanel/index.js","components/NumericInput/index.js","components/AmountInputPanel/index.js","components/AddressInputPanel/index.js","assets/solana-logo.png","components/icons/LightModeIcon.js","components/icons/DarkModeIcon.js","components/DarkModeSwitch/DarkModeSwitch.js","components/Main/index.js","App.js","reportWebVitals.js","index.js","scss/DarkModeSwitch.module.scss","utils/mics.js"],"names":["u64","a","reverse","b","Buffer","from","length","assert","zeroPad","alloc","copy","buffer","BN","map","i","toString","slice","join","config","devnetUrl","localnetUrl","providerUrl","explorerLink","fee","Number","process","network","relayerUrl","coingeckoApi","TOKEN_PROGRAM_ID","PublicKey","ASSOCIATED_TOKEN_PROGRAM_ID","METASOL_PROGRAM_ID","METASOL_PUBLIC_KEY","FEE_PAYER_PUBLIC_KEY","uint64Layout","property","BufferLayout","processTxLayout","vecU8","transferCheckedLayout","getSolBalance","connection","account","getBalance","balance","uiBalance","Math","pow","console","log","getTokenAccounts","mint","owner","getTokenAccountsByOwner","accounts","value","getTokenBalance","tokenAccount","getTokenAccountBalance","calculateFeeInSol","totalSigners","getRecentBlockhash","recentBlock","getFeeCalculatorForBlockhash","blockhash","feeCalulator","lamportsPerSignature","getFeeInToken","name","decimals","feeInLamport","getTokenAndSolPrice","result","tokenPrice","tokenPriceInSol","solPriceInUsd","oneLamportInSol","BigNumber","dividedBy","LAMPORTS_PER_SOL","feeInSol","times","feeInToken","feeInUsd","amount","exponentiatedBy","toFixed","uiAmount","uiAmountUsd","getCurrentSolPrice","currentSolPrice","axios","get","tokenPriceInUsd","usdPriceInToken","data","usd","res","solana","getAmountInUsd","amountInUsd","sendToRelayer","bufferTx","Promise","resolve","reject","post","then","txSignature","catch","error","createAndSendTestTokens","mintAddress","ownerAddress","ReactGA","event","category","action","getAssociatedTokenAddress","findProgramAddress","toBuffer","createAssociatedTokenAccountInstruction","associatedAccount","payer","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","SolletAdapter","isInstalled","connect","wallet","Wallet","PhantomAdapter","window","isPhantom","open","Connect","onConnected","onDisconnected","onClose","onError","useState","key","logo","availableAdapters","setAvailableAdapters","handleConnectWallet","handleCloseModal","walletAdpater","getWalletAdapter","on","_","selectedAdapter","useEffect","tempAdapters","adapter","adapterDetail","updateIsAdapterInstalled","Modal","show","onHide","animation","Header","closeButton","Title","Body","element","className","onClick","Image","width","src","style","marginRight","Column","styled","div","AutoColumn","gap","justify","ExternalLink","target","href","rel","rest","ctrlKey","metaKey","outboundLink","label","debug","preventDefault","location","socialLinkItems","url","categories","isExternal","headerNav","filter","item","includes","Icon","size","iconContent","viewBox","xmlns","fillRule","clipRule","strokeLinejoin","strokeMiterlimit","d","height","w","h","borderRadius","SocialLinks","spacing","Row","Box","align","padding","border","RowBetween","LabelRow","FeeInputPanel","onSelectToken","onTokenBalance","onTransactionFee","recipient","tokenAddress","onSetShowCreateAccount","symbol","address","extensions","coingeckoId","logoURI","allTokens","setAllTokens","transactionFee","setTransactionFee","transactionFeeInUsd","setTransactionFeeInUsd","selectedTokenBalance","setSelectedTokenBalance","selectedTokenSymbol","setSelectedTokenSymbol","handleSelectToken","tokenInfo","addresses","txFee","totalFee","plus","multipliedBy","chainId","getChainId","TokenListProvider","tokens","tokenList","filterByChainId","getList","concat","fetchTokenList","id","fontWeight","fontSize","color","display","cursor","DropdownButton","title","onSelect","e","Dropdown","Item","eventKey","Input","input","NumericInput","onChange","inputRegex","RegExp","enforcer","nextUserInput","test","replace","inputMode","autoComplete","autoCorrect","type","pattern","placeholder","minLength","maxLength","spellCheck","AmountInputPanel","onChangeAmount","updateBalance","updatedAddress","setBalanceUpdated","inputAmount","setInputAmount","setAmountInUsd","selectedCurrencyBalance","setSelectedCurrencyBalance","selectedTokenCoingeckoId","setSelectedCoingeckoId","isUpdate","handleOnChangeAmount","AddressInputPanel","handleInput","useCallback","withoutSpaces","autoCapitalize","LightModeIcon","fill","DarkModeIcon","mask","DarkModeSwitch","mode","setMode","updateScss","root","document","documentElement","body","classList","add","remove","setProperty","currentMode","localStorage","getItem","clsx","styles","darkModeEnabled","newMode","setItem","track","knob","lightModeIcon","darkModeIcon","Main","Connection","clusterApiUrl","setError","message","setMessage","setAmount","setRecipient","solBalance","setSolBalance","tokenBalance","setTokenBalance","solletWallet","setSollectWallet","isConnected","setIsConnected","walletAddress","setWalletAddress","selectedTokenData","setSelectedTokenData","showCreateAccount","setShowCreateAccount","creatingAccount","setCreatingAccount","executing","setExecuting","setUpdateBalance","setTxSignature","openConnectModal","setOpenConnectModal","feeTokenBalance","setFeeTokenBalance","selectedFeeTokenData","setSelectedFeeTokenData","accountToCreate","setAccountToCreate","handleValidateAndTransfer","errorMsg","gt","handleTransferSplToken","handleError","signAndSendTransaction","handleMesage","interval","setInterval","getSignatureStatus","status","confirmationStatus","clearInterval","handleOpenConnectModal","handleOnWalletConnect","publicKey","toBase58","sol","setTimeout","signature","enableTimeout","marginTop","SolanaLogo","Button","variant","substr","Card","tokenData","Col","disabled","maxW","justifyContent","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","initialize","pageview","pathname","search","module","exports","transferAmount","senderSplAccount","recipientSplAccount","mintPublicKey","transferInstruction","createTransferCheckedInstruction","tempTransaction","Transaction","feePayer","recentBlockhash","isSplAccountExists","createInstruction","createMetasolTransaction","transaction","signTransaction","signedTx","serialize","verifySignatures","splAccounts","txInstruction","senderAuthority","feeSplToken","feeSplTokenAddress","feePayerSplAccount","feeTokenPublicKey","metasolKeys","SYSVAR_CLOCK_PUBKEY","getSlot","slot","encode","instruction","expiry_block","required_accounts_length","instruction_data","feePayerAccountInstruction","processTxInstruction","source","destination","multiSigners","span","push","forEach","signer"],"mappings":"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","file":"static/js/main.9b1ee8af.chunk.js","sourcesContent":["import BN from 'bn.js';\nimport assert from 'assert';\n\n/**\n * 64-bit value\n */\nexport class u64 extends BN {\n    /**\n     * Convert to Buffer representation\n     */\n    toBuffer() {\n        const a = super.toArray().reverse();\n        const b = Buffer.from(a);\n        if (b.length === 8) {\n            return b;\n        }\n        assert(b.length < 8, 'u64 too large');\n\n        const zeroPad = Buffer.alloc(8);\n        b.copy(zeroPad);\n        return zeroPad;\n    }\n\n    /**\n     * Construct a u64 from Buffer representation\n     */\n    static fromBuffer(buffer) {\n        assert(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n        return new BN(\n            [...buffer]\n                .reverse()\n                .map(i => `00${i.toString(16)}`.slice(-2))\n                .join(''),\n            16,\n        );\n    }\n}","import { PublicKey } from \"@solana/web3.js\";\nimport { vecU8 } from \"@project-serum/borsh\";\nimport * as BufferLayout from \"buffer-layout\";\nimport { config } from \"dotenv\";\nconfig();\n\nexport const devnetUrl = \" https://api.devnet.solana.com\";\nexport const localnetUrl = \"http://127.0.0.1:8899\";\nexport const providerUrl = \"https://www.sollet.io\";\nexport const explorerLink = \"https://explorer.solana.com\";\nexport const fee = Number(process.env.REACT_APP_RELAYER_FEE) || 50;\nexport const network = process.env.REACT_APP_NETWORK || \"localnet\";\nexport const relayerUrl = process.env.REACT_APP_RELAYER_URL || \"http://localhost:5000\";\nexport const coingeckoApi = \"https://api.coingecko.com/api/v3\";\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n);\n\nexport const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey(\n    'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n);\n\nexport const METASOL_PROGRAM_ID = new PublicKey(\n    'ErSvTPUJY2PhBp64qGEvFQALKdowYVFi6wjPzu8WdrGx',\n);\n\nexport const METASOL_PUBLIC_KEY = new PublicKey(\n    'E5oHNTpKs76bzTLMCypKNxpriAYU91dnn72wJSb2riNZ',\n);\n\nexport const FEE_PAYER_PUBLIC_KEY = new PublicKey(\n    'GE7ikPHM4yaS67rsyt8vs84D4d9m9VpueZrDSeFh9wW6',\n);\n\nconst uint64Layout = (property = 'uint64') => {\n    return BufferLayout.blob(8, property);\n}\n\nexport const processTxLayout = BufferLayout.struct([\n    BufferLayout.u8('instruction'),\n    uint64Layout('fee'),\n    uint64Layout('expiry_block'),\n    BufferLayout.u8('required_accounts_length'),\n    vecU8('instruction_data'),\n]);\n\nexport const transferCheckedLayout = BufferLayout.struct([\n    BufferLayout.u8('instruction'),\n    uint64Layout('amount'),\n    BufferLayout.u8('decimals'),\n]);\n","import {\n    LAMPORTS_PER_SOL,\n    PublicKey,\n    SystemProgram,\n    SYSVAR_RENT_PUBKEY,\n    Transaction,\n    TransactionInstruction,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport ReactGA from 'react-ga';\nimport BigNumber from \"bignumber.js\";\nimport {\n    relayerUrl,\n    coingeckoApi,\n    TOKEN_PROGRAM_ID,\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n} from \"./constants\";\n\nexport const getSolBalance = async (connection, account) => {\n    try {\n        let balance = await connection.getBalance(account);\n        return {\n            balance,\n            uiBalance: balance / Math.pow(10, 9),\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const getTokenAccounts = async (connection, mint, owner) => {\n    try {\n        let accounts = await connection.getTokenAccountsByOwner(\n            new PublicKey(owner),\n            { mint: new PublicKey(mint) },\n        );\n\n        return accounts.value;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getTokenBalance = async (connection, tokenAccount) => {\n    try {\n        return await connection.getTokenAccountBalance(tokenAccount);\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const calculateFeeInSol = async (\n    connection,\n    totalSigners,\n) => {\n    const recentBlock = await connection.getRecentBlockhash();\n\n    const feeCalulator = await connection\n        .getFeeCalculatorForBlockhash(recentBlock.blockhash);\n\n    const lamportsPerSignature = feeCalulator.value\n        .lamportsPerSignature;\n\n    return lamportsPerSignature * totalSigners;\n}\n\nexport const getFeeInToken = async (\n    name,\n    decimals,\n    feeInLamport,\n) => {\n    const result = await getTokenAndSolPrice(name);\n    const tokenPrice = result.tokenPriceInSol;\n    const solPriceInUsd = result.solPriceInUsd;\n\n    const oneLamportInSol = new BigNumber(1).dividedBy(LAMPORTS_PER_SOL);\n\n    const feeInSol = new BigNumber(feeInLamport).times(oneLamportInSol);\n    const feeInToken = tokenPrice.times(feeInSol);\n    const feeInUsd = feeInSol.times(solPriceInUsd);\n\n    return {\n        amount: feeInToken.times\n            (\n                new BigNumber(10)\n                    .exponentiatedBy(decimals)\n            )\n            .toFixed(0),\n        uiAmount: feeInToken,\n        uiAmountUsd: feeInUsd.toFixed(4),\n    };\n}\n\nconst getTokenAndSolPrice = async (name) => {\n    const currentSolPrice = await getCurrentSolPrice();\n\n    const tokenPriceInUsd = await axios.get(\n        `${coingeckoApi}/simple/price?ids=${name}&vs_currencies=usd`\n    );\n\n    const usdPriceInToken = new BigNumber(1)\n        .dividedBy(new BigNumber(tokenPriceInUsd.data[name].usd));\n\n    return {\n        solPriceInUsd: currentSolPrice,\n        tokenPriceInSol: usdPriceInToken.times(currentSolPrice)\n    };\n};\n\nconst getCurrentSolPrice = async () => {\n    const res = await axios.get(\n        `${coingeckoApi}/simple/price?ids=solana&vs_currencies=usd`\n    );\n\n    return new BigNumber(res.data.solana.usd);\n};\n\nexport const getAmountInUsd = async (name, amount) => {\n    const res = await axios.get(\n        `${coingeckoApi}/simple/price?ids=${name}&vs_currencies=usd`\n    );\n\n    const tokenPriceInUsd = new BigNumber(res.data[name].usd);\n    const amountInUsd = new BigNumber(amount).times(tokenPriceInUsd);\n\n    return amountInUsd.toFixed(4);\n};\n\nexport const sendToRelayer = (bufferTx) => {\n    return new Promise((resolve, reject) => {\n        axios.post\n            (\n                `${relayerUrl}/execute-tx`,\n                {\n                    bufferTx\n                }\n            )\n            .then((txSignature) => {\n                resolve(txSignature)\n            })\n            .catch((error) => {\n                reject(error);\n            })\n    });\n};\n\nexport const createAndSendTestTokens = (\n    mintAddress,\n    ownerAddress,\n) => {\n    return new Promise((resolve, reject) => {\n        axios.post\n            (\n                `${relayerUrl}/create-wallet`,\n                {\n                    mintAddress,\n                    ownerAddress,\n                }\n            )\n            .then((result) => {\n                resolve(result)\n\n                ReactGA.event({\n                    category: 'Wallet',\n                    action: 'Created',\n                });\n            })\n            .catch((error) => {\n                reject(error);\n            })\n    });\n};\n\nexport const getAssociatedTokenAddress = async (mint, owner) => {\n    try {\n        mint = new PublicKey(mint);\n        owner = new PublicKey(owner);\n\n        return (\n            await PublicKey.findProgramAddress(\n                [owner.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n                ASSOCIATED_TOKEN_PROGRAM_ID,\n            )\n        )[0];\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport async function createAssociatedTokenAccount(\n    connection,\n    owner,\n    associatedAddress,\n    mint,\n    payer\n) {\n    try {\n        await connection.sendAndConfirmTransaction(\n            'CreateAssociatedTokenAccount',\n            connection,\n            new Transaction().add(\n                createAssociatedTokenAccountInstruction(\n                    mint,\n                    associatedAddress,\n                    owner,\n                    payer.publicKey,\n                ),\n            ),\n            payer,\n        );\n\n        return true;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n/**\n * Construct the AssociatedTokenProgram instruction to create the associated\n * token account\n *\n * @param associatedProgramId SPL Associated Token program account\n * @param programId SPL Token program account\n * @param mint Token mint account\n * @param associatedAccount New associated account\n * @param owner Owner of the new account\n * @param payer Payer of fees\n */\nexport function createAssociatedTokenAccountInstruction(\n    mint,\n    associatedAccount,\n    owner,\n    payer,\n) {\n    const data = Buffer.alloc(0);\n\n    let keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedAccount, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: ASSOCIATED_TOKEN_PROGRAM_ID,\n        data,\n    });\n}\n","import Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { providerUrl } from \"../../../utils/constants\";\n\nexport class SolletAdapter {\n    isInstalled = true;\n\n    connect = () => {\n        const wallet = new Wallet(providerUrl);\n        wallet.connect();\n        return wallet;\n    }\n}\n","export class PhantomAdapter {\n    isInstalled = window.solana && window.solana.isPhantom;\n\n    connect = () => {\n        if (this.isInstalled) {\n            window.solana.connect();\n            return window.solana;\n        } else {\n            window.open(\"https://phantom.app/\", \"_blank\");\n        }\n    }\n}\n","import React, { useEffect, useState } from 'react';\nimport { Image, Modal } from 'react-bootstrap';\nimport { SolletAdapter } from './Sollet';\nimport { PhantomAdapter } from './Phantom';\n\nexport default function Connect({\n    onConnected,\n    onDisconnected,\n    onClose,\n    onError,\n}) {\n    const [availableAdapters, setAvailableAdapters] = useState([\n        {\n            key: 0, name: 'Sollet', isInstalled: true,\n            logo: \"https://cdn.jsdelivr.net/gh/solana-labs/oyster@main/assets/wallets/sollet.svg\"\n        },\n        {\n            key: 1, name: \"Phantom\", isInstalled: false,\n            logo: \"https://phantom.app/img/logo.png\"\n        },\n    ]);\n\n    const handleConnectWallet = async (event) => {\n        try {\n            handleCloseModal();\n\n            const walletAdpater = getWalletAdapter(event);\n\n            const wallet = await walletAdpater.connect();\n\n            if (walletAdpater.isInstalled) {\n                wallet.on('connect', async (_) => {\n                    onConnected(wallet);\n                });\n\n                wallet.on('disconnect', () => {\n                    onDisconnected();\n                });\n            }\n        } catch (error) {\n            onError(error);\n        }\n    }\n\n    const getWalletAdapter = (selectedAdapter) => {\n        switch (Number(selectedAdapter)) {\n            case 0:\n                return new SolletAdapter();\n            case 1:\n                return new PhantomAdapter();\n            default:\n                break;\n        }\n    }\n\n    const updateIsAdapterInstalled = () => {\n        let tempAdapters = [...availableAdapters];\n\n        for (let i = 1; i <= availableAdapters.length - 1; i++) {\n            const adapter = getWalletAdapter(i);\n            let adapterDetail = {\n                ...tempAdapters[1],\n                isInstalled: adapter.isInstalled || false\n            }\n\n            tempAdapters[i] = adapterDetail;\n\n            if (i === availableAdapters.length - 1) {\n                setAvailableAdapters(tempAdapters);\n            }\n        }\n    }\n\n    const handleCloseModal = () => {\n        onClose();\n    }\n\n    useEffect(() => {\n        updateIsAdapterInstalled();\n        // eslint-disable-next-line\n    }, []);\n\n    return (\n        <>\n            <Modal show={true} onHide={handleCloseModal} animation={false} >\n                <Modal.Header closeButton>\n                    <Modal.Title>Connect Your Wallet</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {availableAdapters.map((element) => (\n                        <div\n                            className=\"modal-div\"\n                            key={element.key}\n                            onClick={() => handleConnectWallet(element.key)}\n                        >\n                            <Image\n                                width=\"20px\"\n                                src={element.logo}\n                                style={{ marginRight: \"1rem\" }}\n                            />\n                            {!element.isInstalled ?\n                                <span>Install </span> : null\n                            }\n                            {element.name}\n                        </div>\n                    ))}\n                </Modal.Body>\n            </Modal>\n        </>\n    );\n}\n","import styled from 'styled-components'\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`\nexport const ColumnCenter = styled(Column)`\n  width: 100%;\n  align-items: center;\n`\n\nexport const AutoColumn = styled.div`\n  display: grid;\n  grid-auto-rows: auto;\n  grid-row-gap: ${({ gap }) => (gap === 'sm' && '8px') || (gap === 'md' && '12px') || (gap === 'lg' && '24px') || gap};\n  justify-items: ${({ justify }) => justify && justify};\n`\n\nexport default Column\n","import ReactGA from 'react-ga';\n\n/**\n * Outbound link that handles firing google analytics events\n */\nexport function ExternalLink({\n    target = '_blank',\n    href,\n    rel = 'noopener noreferrer',\n    ...rest\n}) {\n    const handleClick = (event) => {\n        // don't prevent default, don't redirect if it's a new tab\n        if (target === '_blank' || event.ctrlKey || event.metaKey) {\n            ReactGA.outboundLink({ label: href }, () => {\n                console.debug('Fired outbound link event', href)\n            })\n        } else {\n            event.preventDefault()\n            // send a ReactGA event and then trigger a location change\n            ReactGA.outboundLink({ label: href }, () => {\n                window.location.href = href\n            })\n        }\n    }\n\n    // eslint-disable-next-line\n    return <a\n        target={target}\n        rel={rel}\n        href={href}\n        onClick={handleClick}\n        {...rest}\n    ></a>\n}\n","import React from 'react';\nimport { HStack, Box } from '@chakra-ui/react';\nimport { navItems } from './constants';\nimport { ExternalLink } from '../ExternalLink';\n\nconst socialLinkItems = navItems.filter(item => item.categories.includes('social'));\n\nfunction Icon({ name, className, size }) {\n    let iconContent = null;\n    switch (name) {\n        case 'Twitter':\n            iconContent = (\n                <svg\n                    viewBox=\"0 0 512 512\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    strokeLinejoin=\"round\"\n                    strokeMiterlimit=\"2\"\n                >\n                    <path\n                        className=\"metasolFill\"\n                        d=\"M256 0a256 256 0 110 512 256 256 0 010-512zm-45 392c113 0 175-94 175-175v-8c12-9 22-20 31-32-11 5-23 8-36 10 13-8 23-20 27-34-11 7-25 12-39 15a62 62 0 00-105 56c-51-3-96-27-126-65a62 62 0 0019 83c-10-1-20-3-28-8v1c0 30 21 54 49 60a61 61 0 01-27 1c7 25 30 42 57 43a124 124 0 01-91 25c27 18 59 28 94 28z\"\n                    />\n                </svg>\n            );\n            break;\n        case 'Youtube':\n            iconContent = (\n                <svg\n                    viewBox=\"0 0 512 512\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    strokeLinejoin=\"round\"\n                    strokeMiterlimit=\"2\"\n                >\n                    <path\n                        className=\"metasolFill\"\n                        d=\"M256 0a256 256 0 110 512 256 256 0 010-512zm153 179c-3-14-14-25-28-28-25-7-125-7-125-7s-100 0-125 7c-14 3-25 14-28 28-7 25-7 77-7 77s0 52 7 77c3 14 14 25 28 28 25 7 125 7 125 7s100 0 125-7c14-3 25-14 28-28 7-25 7-77 7-77s0-52-7-77zM224 304v-96l83 48-83 48z\"\n                    />\n                </svg>\n            );\n            break;\n        case 'Discord':\n            iconContent = (\n                <svg\n                    viewBox=\"0 0 512 512\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    strokeLinejoin=\"round\"\n                    strokeMiterlimit=\"2\"\n                    width=\"54\"\n                    height=\"54\"\n                >\n                    <path\n                        className=\"metasolFill\"\n                        d=\"M226.011 0H29.99C13.459 0 0 13.458 0 30.135v197.778c0 16.677 13.458 30.135 29.989 30.135h165.888l-7.754-27.063 18.725 17.408 17.7 16.384L256 292.571V30.135C256 13.458 242.542 0 226.011 0zm-56.466 191.05s-5.266-6.291-9.655-11.85c19.164-5.413 26.478-17.408 26.478-17.408-5.998 3.95-11.703 6.73-16.823 8.63-7.314 3.073-14.336 5.12-21.211 6.291-14.044 2.633-26.917 1.902-37.888-.146-8.339-1.61-15.507-3.95-21.504-6.29-3.365-1.317-7.022-2.926-10.68-4.974-.438-.293-.877-.439-1.316-.732-.292-.146-.439-.292-.585-.438-2.633-1.463-4.096-2.487-4.096-2.487s7.022 11.703 25.6 17.261c-4.388 5.56-9.801 12.142-9.801 12.142-32.33-1.024-44.617-22.235-44.617-22.235 0-47.104 21.065-85.285 21.065-85.285 21.065-15.799 41.106-15.36 41.106-15.36l1.463 1.756C80.75 77.53 68.608 89.088 68.608 89.088s3.218-1.755 8.63-4.242c15.653-6.876 28.088-8.777 33.208-9.216.877-.147 1.609-.293 2.487-.293a123.776 123.776 0 0 1 29.55-.292c13.896 1.609 28.818 5.705 44.031 14.043 0 0-11.556-10.971-36.425-18.578l2.048-2.34s20.041-.44 41.106 15.36c0 0 21.066 38.18 21.066 85.284 0 0-12.435 21.211-44.764 22.235zm-68.023-68.316c-8.338 0-14.92 7.314-14.92 16.237 0 8.924 6.728 16.238 14.92 16.238 8.339 0 14.921-7.314 14.921-16.238.147-8.923-6.582-16.237-14.92-16.237m53.394 0c-8.339 0-14.922 7.314-14.922 16.237 0 8.924 6.73 16.238 14.922 16.238 8.338 0 14.92-7.314 14.92-16.238 0-8.923-6.582-16.237-14.92-16.237\"\n                    />\n                </svg>\n            );\n            break;\n        case 'Github':\n            iconContent = (\n                <svg\n                    viewBox=\"0 0 512 512\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    strokeLinejoin=\"round\"\n                    strokeMiterlimit=\"2\"\n                >\n                    <path\n                        className=\"metasolFill\"\n                        d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\"\n                    />\n                </svg>\n            );\n            break;\n        case 'Blog':\n            iconContent = (\n                <svg\n                    viewBox=\"0 0 512 512\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    strokeLinejoin=\"round\"\n                    strokeMiterlimit=\"2\"\n                >\n                    <path\n                        className=\"metasolFill\"\n                        d=\"M511 256a255 255 0 10-255 255c141 0 255-114 255-255zm-229 0c0 63-51 114-113 114S56 319 56 256s51-114 113-114 113 51 113 114zm123 0c0 59-25 107-56 107s-56-48-56-107 25-107 56-107 56 48 56 107zm51 0c0 53-9 96-20 96s-20-43-20-96 9-96 20-96 20 43 20 96z\"\n                    />\n                </svg>\n            );\n            break;\n        default:\n    }\n    return (\n        <Box w={size || '25px'} h={size || '25px'} borderRadius=\"100%\">\n            <Box className=\"socialIcon\">{iconContent}</Box>\n        </Box>\n    );\n}\n\nfunction SocialLinks({ size, spacing, ...rest }) {\n    return (\n        <HStack spacing={spacing || 10} {...rest}>\n            {socialLinkItems.map(item => (\n                <ExternalLink\n                    href={item.url}\n                    key={item.url}\n                >\n                    <Icon name={item.name} className=\"socialIcon\" size={size || 30} />\n                </ExternalLink>\n            ))}\n        </HStack>\n    );\n}\n\nexport default SocialLinks;\n","export const navItems = [\n    {\n        name: 'Discord',\n        url: 'https://discord.gg/invite/EWmMMHT7Qy',\n        categories: ['social'],\n        isExternal: true,\n    },\n    {\n        name: 'Twitter',\n        url: 'https://twitter.com/sol_meta',\n        categories: ['social'],\n        isExternal: true,\n    },\n    {\n        name: 'Github',\n        url: 'https://github.com/metasol',\n        categories: ['social'],\n        isExternal: true,\n    },\n    {\n        name: 'Blog',\n        url: 'https://medium.com/@metasol',\n        categories: ['social'],\n        headerNav: true,\n        isExternal: true,\n    },\n];\n","import { Box } from '@chakra-ui/layout'\nimport styled from 'styled-components'\n\nconst Row = styled(Box)`\n  width: ${({ width }) => width ?? '100%'};\n  display: flex;\n  padding: 0;\n  align-items: ${({ align }) => align ?? 'center'};\n  justify-content: ${({ justify }) => justify ?? 'flex-start'};\n  padding: ${({ padding }) => padding};\n  border: ${({ border }) => border};\n  border-radius: ${({ borderRadius }) => borderRadius};\n`\n\nexport const RowBetween = styled(Row)`\n  justify-content: space-between;\n`\n\nexport const RowFlat = styled.div`\n  display: flex;\n  align-items: flex-end;\n`\n\nexport const AutoRow = styled(Row)`\n  flex-wrap: wrap;\n  margin: ${({ gap }) => gap && `-${gap}`};\n  justify-content: ${({ justify }) => justify && justify};\n\n  & > * {\n    margin: ${({ gap }) => gap} !important;\n  }\n`\n\nexport const RowFixed = styled(Row)`\n  width: fit-content;\n  margin: ${({ gap }) => gap && `-${gap}`};\n`\n\nexport default Row\n","import { React, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoColumn } from '../Column'\nimport { RowBetween } from '../Row'\nimport { TokenListProvider } from '@solana/spl-token-registry';\nimport { Dropdown, Image, DropdownButton } from 'react-bootstrap'\nimport { getChainId } from '../../utils/mics'\nimport { fee, network } from '../../utils/constants'\nimport {\n    getTokenBalance,\n    getTokenAccounts,\n    getAssociatedTokenAddress,\n    calculateFeeInSol,\n    getFeeInToken,\n} from '../../utils/api'\nimport BigNumber from 'bignumber.js';\nconst defaultURI = \"https://cryptologos.cc/logos/solana-sol-logo.png\";\n\nconst LabelRow = styled.div`\n  display: flex;\n  flex-flow: row-reverse wrap;\n  align-items: center;\n  span:hover {\n    cursor: pointer;\n    color: gray;\n  }\n`\n\nexport default function FeeInputPanel({\n    connection,\n    account,\n    onSelectToken,\n    onTokenBalance,\n    onTransactionFee,\n    onError,\n    recipient,\n    amount,\n    tokenAddress,\n    onSetShowCreateAccount,\n}) {\n    const [allTokens, setAllTokens] = useState([\n        {\n            decimals: 9,\n            symbol: \"TestSRM\",\n            address: \"Cv7DvSt9842MSxX8LXQewpfcWNC8qT5P9w7wpHshcEzx\",\n            extensions: {\n                coingeckoId: \"serum\"\n            },\n            logoURI: \"https://cdn.jsdelivr.net/gh/trustwallet/assets@master/blockchains/ethereum/assets/0x476c5E26a75bd202a9683ffD34359C0CC15be0fF/logo.png\",\n        },\n        {\n            decimals: 9,\n            symbol: \"TestUSDC\",\n            address: \"PRgdpShReV7dRRcXEYBueAHVtCoBAe9kDMUDEYLUR4p\",\n            extensions: {\n                coingeckoId: \"usd-coin\"\n            },\n            logoURI: \"https://cdn.jsdelivr.net/gh/solana-labs/token-list@main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png\",\n        },\n    ]);\n\n    const [transactionFee, setTransactionFee] = useState(\"\");\n    const [transactionFeeInUsd, setTransactionFeeInUsd] = useState(\"\");\n    const [selectedTokenBalance, setSelectedTokenBalance] = useState(\"\");\n    const [selectedTokenSymbol, setSelectedTokenSymbol] = useState(\"Select a token\");\n\n    const handleSelectToken = async (event) => {\n        const data = allTokens.filter((element) => {\n            return element.address === event\n        });\n        const tokenInfo = data[0];\n\n        onSelectToken(data[0]);\n        setSelectedTokenSymbol(data[0].symbol);\n\n        if (account) {\n            const addresses = await getTokenAccounts(\n                connection, tokenInfo.address, account\n            );\n\n            if (addresses && addresses.length > 0) {\n                const tokenAccount = await getAssociatedTokenAddress(\n                    tokenInfo.address, account\n                );\n\n                const balance = await getTokenBalance(\n                    connection, tokenAccount\n                );\n\n                setSelectedTokenBalance(balance.value.uiAmount);\n                onTokenBalance(balance.value.uiAmount);\n\n                const transactionFee = await calculateFeeInSol(connection, 2);\n                const txFee = await getFeeInToken(\n                    tokenInfo.extensions.coingeckoId,\n                    tokenInfo.decimals,\n                    transactionFee,\n                );\n\n                const totalFee = txFee.uiAmount.plus(\n                    txFee.uiAmount\n                        .multipliedBy(new BigNumber(fee))\n                        .dividedBy(100)\n                );\n\n                onTransactionFee(totalFee);\n                setTransactionFee(totalFee.toFixed(5));\n                setTransactionFeeInUsd(txFee.uiAmountUsd);\n            } else {\n                onSetShowCreateAccount(data[0].address);\n                onError(\"You don't have token account for this token.\")\n                setSelectedTokenBalance(\"\");\n                setTransactionFee(\"\");\n                setTransactionFeeInUsd(\"\");\n            }\n        }\n    }\n\n    const fetchTokenList = () => {\n        const chainId = getChainId(network);\n        new TokenListProvider().resolve().then(async (tokens) => {\n            const tokenList = tokens.filterByChainId(chainId).getList();\n            setAllTokens(allTokens.concat(tokenList));\n        });\n    }\n\n    useEffect(() => {\n        if (allTokens.length === 0) {\n            fetchTokenList();\n        }\n        // eslint-disable-next-line\n    }, []);\n\n    return (\n        <>\n            {account && recipient && amount && tokenAddress ?\n                <div id=\"mainInput\">\n                    <div className=\"input-container\">\n                        <AutoColumn gap=\"md\">\n                            <LabelRow>\n                                <RowBetween>\n                                    <div\n                                        fontWeight={500}\n                                        fontSize={14}\n                                    >\n                                        Fee Token\n                                    </div>\n\n                                    {account && (\n                                        <div\n                                            color=\"rgb(86, 90, 105)\"\n                                            fontWeight={500}\n                                            fontSize={14}\n                                            style={{ display: 'inline', cursor: 'pointer' }}\n                                        >\n                                            {selectedTokenBalance !== \"\"\n                                                ? 'Balance: ' + selectedTokenBalance.toFixed(3)\n                                                : ' -'\n                                            }\n                                        </div>\n                                    )}\n                                </RowBetween>\n                            </LabelRow>\n\n                            <LabelRow>\n                                <RowBetween>\n                                    <div>\n                                        {transactionFee ?\n                                            <span>\n                                                {transactionFee}\n                                                <span> ($ {transactionFeeInUsd})</span>\n                                            </span>\n                                            : ' -'\n                                        }\n                                    </div>\n                                    <DropdownButton\n                                        title={selectedTokenSymbol}\n                                        onSelect={(e) => handleSelectToken(e)}\n                                    >\n                                        {allTokens.map((element, key) => (\n                                            element.symbol !== \"SOL\" ? (\n                                                <Dropdown.Item\n                                                    key={key}\n                                                    eventKey={element.address}\n                                                >\n                                                    <Image\n                                                        width=\"20px\"\n                                                        src={\n                                                            element.logoURI ?\n                                                                element.logoURI :\n                                                                defaultURI\n                                                        }\n                                                        style={{ marginRight: \"20px\" }}\n\n                                                    />\n                                                    {element.symbol}\n                                                </Dropdown.Item>\n                                            ) : null\n                                        ))}\n                                    </DropdownButton>\n                                </RowBetween>\n                            </LabelRow>\n                        </AutoColumn>\n                    </div>\n                </div >\n                : null\n            }\n        </>\n    )\n}","import { React } from 'react'\nimport styled from 'styled-components'\n\nconst Input = styled.input`\n  font-size: 1.25rem;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  width: 0;\n  transition: color 300ms step-start;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  width: 100%;\n  ::placeholder {\n    color: #656979;\n  }\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n`\n\nexport default function NumericInput({\n    value,\n    onChange\n}) {\n    const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`);\n\n    function escapeRegExp(string) {\n        return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n    }\n\n    const enforcer = (nextUserInput) => {\n        if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n            onChange(nextUserInput)\n        }\n    }\n\n    return (\n        <Input\n            className=\"input-panel\"\n            value={value}\n            onChange={event => {\n                enforcer(event.target.value.replace(/,/g, '.'))\n            }}\n            // universal input options\n            inputMode=\"decimal\"\n            title=\"Token Amount\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            // text-specific options\n            type=\"text\"\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\n            placeholder='0.0'\n            minLength={1}\n            maxLength={79}\n            spellCheck=\"false\"\n        />\n    )\n}\n","import { React, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoColumn } from '../Column'\nimport NumericInput from '../NumericInput'\nimport { RowBetween } from '../Row'\nimport { TokenListProvider } from '@solana/spl-token-registry';\nimport { Dropdown, Image, DropdownButton } from 'react-bootstrap'\nimport { getChainId } from '../../utils/mics'\nimport { network } from '../../utils/constants'\nimport {\n    getTokenBalance,\n    getTokenAccounts,\n    getAssociatedTokenAddress,\n    getAmountInUsd,\n} from '../../utils/api'\nconst defaultURI = \"https://cryptologos.cc/logos/solana-sol-logo.png\";\n\nconst LabelRow = styled.div`\n  display: flex;\n  flex-flow: row-reverse wrap;\n  align-items: center;\n  span:hover {\n    cursor: pointer;\n    color: gray;\n  }\n`\n\nexport default function AmountInputPanel({\n    connection,\n    account,\n    value,\n    onChangeAmount,\n    onSelectToken,\n    onTokenBalance,\n    onSetShowCreateAccount,\n    onError,\n    updateBalance,\n    updatedAddress,\n    setBalanceUpdated,\n}) {\n    const [allTokens, setAllTokens] = useState([\n        {\n            decimals: 9,\n            symbol: \"TestSRM\",\n            address: \"Cv7DvSt9842MSxX8LXQewpfcWNC8qT5P9w7wpHshcEzx\",\n            extensions: {\n                coingeckoId: \"serum\"\n            },\n            logoURI: \"https://cdn.jsdelivr.net/gh/trustwallet/assets@master/blockchains/ethereum/assets/0x476c5E26a75bd202a9683ffD34359C0CC15be0fF/logo.png\",\n        },\n        {\n            decimals: 9,\n            symbol: \"TestUSDC\",\n            address: \"PRgdpShReV7dRRcXEYBueAHVtCoBAe9kDMUDEYLUR4p\",\n            extensions: {\n                coingeckoId: \"usd-coin\"\n            },\n            logoURI: \"https://cdn.jsdelivr.net/gh/solana-labs/token-list@main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png\",\n        },\n    ]);\n\n    // const [openSelectTokenModal, setOpenSelectTokenModal] = useState(false);\n    const [inputAmount, setInputAmount] = useState(\"\");\n    const [amountInUsd, setAmountInUsd] = useState(\"\");\n    const [selectedCurrencyBalance, setSelectedCurrencyBalance] = useState(\"\");\n    const [selectedTokenSymbol, setSelectedTokenSymbol] = useState(\"Select a token\");\n    const [selectedTokenCoingeckoId, setSelectedCoingeckoId] = useState(\"\");\n\n    const handleSelectToken = async (event, isUpdate) => {\n        // handleModalClose();\n\n        const data = allTokens.filter((element) => {\n            return element.address === event\n        });\n        const tokenInfo = data[0];\n\n        onSelectToken(data[0]);\n        setSelectedTokenSymbol(data[0].symbol);\n        setSelectedCoingeckoId(data[0].extensions.coingeckoId);\n\n        if (account) {\n            const addresses = await getTokenAccounts(\n                connection, tokenInfo.address, account\n            );\n\n            if (addresses && addresses.length > 0) {\n                const tokenAccount = await getAssociatedTokenAddress(\n                    tokenInfo.address, account\n                );\n\n                const balance = await getTokenBalance(\n                    connection, tokenAccount\n                );\n\n                setSelectedCurrencyBalance(balance.value.uiAmount);\n                onTokenBalance(balance.value.uiAmount);\n\n                if (inputAmount && !isUpdate) {\n                    handleOnChangeAmount(\n                        inputAmount,\n                        data[0].extensions.coingeckoId\n                    );\n                } else if (isUpdate) {\n                    handleOnChangeAmount(\"\");\n                }\n            } else {\n                onSetShowCreateAccount(data[0].address);\n                onError(\"You don't have token account for this token.\")\n                setSelectedCurrencyBalance(\"\");\n            }\n        }\n    }\n\n    const fetchTokenList = () => {\n        const chainId = getChainId(network);\n        new TokenListProvider().resolve().then(async (tokens) => {\n            const tokenList = tokens.filterByChainId(chainId).getList();\n            setAllTokens(allTokens.concat(tokenList));\n        });\n    }\n\n    const onClickMax = () => {\n        handleOnChangeAmount(selectedCurrencyBalance);\n    }\n\n    const handleOnChangeAmount = async (amount, coingeckoId) => {\n        onChangeAmount(amount);\n        setInputAmount(amount);\n\n        coingeckoId = coingeckoId || selectedTokenCoingeckoId;\n\n        if (!amount) {\n            setAmountInUsd(\"\");\n        } else if (coingeckoId) {\n            setAmountInUsd(await getAmountInUsd(\n                coingeckoId,\n                amount,\n            ));\n        }\n    };\n\n    // const handleModalClose = () => {\n    //     setOpenSelectTokenModal(false);\n    // }\n\n    useEffect(() => {\n        if (allTokens.length === 0) {\n            fetchTokenList();\n        }\n\n        if (updateBalance) {\n            handleSelectToken(updatedAddress, true);\n            setBalanceUpdated();\n        }\n        // eslint-disable-next-line\n    }, [updateBalance]);\n\n    return (\n        <div id=\"mainInput\">\n            <div className=\"input-container\">\n                <AutoColumn gap=\"md\">\n                    <LabelRow>\n                        <RowBetween>\n                            <div\n                                fontWeight={500}\n                                fontSize={14}\n                            >\n                                Amount\n                            </div>\n\n                            {account && (\n                                <div\n                                    onClick={onClickMax}\n                                    color=\"rgb(86, 90, 105)\"\n                                    fontWeight={500}\n                                    fontSize={14}\n                                    style={{ display: 'inline', cursor: 'pointer' }}\n                                >\n                                    {selectedCurrencyBalance !== \"\"\n                                        ? 'Balance: ' + selectedCurrencyBalance.toFixed(3)\n                                        : ' -'\n                                    }\n                                </div>\n                            )}\n                        </RowBetween>\n                    </LabelRow>\n\n                    <LabelRow>\n                        <RowBetween>\n                            <NumericInput\n                                value={value}\n                                onChange={(value) => handleOnChangeAmount(value)}\n                            />\n\n                            <DropdownButton\n                                title={selectedTokenSymbol}\n                                onSelect={(e) => handleSelectToken(e, false)}\n                            >\n                                {allTokens.map((element, key) => (\n                                    element.symbol !== \"SOL\" ? (\n                                        <Dropdown.Item\n                                            key={key}\n                                            eventKey={element.address}\n                                        >\n                                            <Image\n                                                width=\"20px\"\n                                                src={\n                                                    element.logoURI ?\n                                                        element.logoURI :\n                                                        defaultURI\n                                                }\n                                                style={{ marginRight: \"20px\" }}\n\n                                            />\n                                            {element.symbol}\n                                        </Dropdown.Item>\n                                    ) : null\n                                ))}\n                            </DropdownButton>\n\n                            {/* <DropdownButton\n                                title={selectedTokenSymbol}\n                                onClick={() => setOpenSelectTokenModal(true)}\n                            >\n\n                            </DropdownButton>\n\n                            <Modal\n                                show={openSelectTokenModal}\n                                onHide={handleModalClose}\n                                animation={false}\n                                className=\"select-token-modal\"\n                            >\n                                <Modal.Header closeButton>\n                                    <Modal.Title>Choose Token</Modal.Title>\n                                </Modal.Header>\n                                <Modal.Body>\n                                    {allTokens.map((element) => (\n                                        element.symbol !== \"SOL\" ? (\n                                            <div\n                                                className=\"modal-div\"\n                                                key={element.address}\n                                                onClick={() => handleSelectToken(element.address)}\n                                            >\n                                                <Image\n                                                    width=\"20px\"\n                                                    src={\n                                                        element.logoURI ?\n                                                            element.logoURI :\n                                                            defaultURI\n                                                    }\n                                                    style={{ marginRight: \"20px\" }}\n\n                                                />\n                                                <span\n                                                    style={{ fontSize: \"20px\" }}\n                                                >\n                                                    {element.symbol}\n                                                </span>\n                                            </div>\n                                        ) : null\n                                    ))}\n                                </Modal.Body>\n                            </Modal> */}\n                        </RowBetween>\n                    </LabelRow>\n\n                    <LabelRow>\n                        <RowBetween>\n                            <div>\n                                {amountInUsd ?\n                                    <span>\n                                        $\n                                        <span> {amountInUsd}</span>\n                                    </span>\n                                    : null\n                                }\n                            </div>\n                        </RowBetween>\n                    </LabelRow>\n                </AutoColumn>\n            </div>\n        </div >\n    )\n}","import { React, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { AutoColumn } from '../Column'\nimport { RowBetween } from '../Row'\n\nconst Input = styled.input`\n  font-size: 1.25rem;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  width: 0;\n  transition: color 300ms step-start;\n  color: rgb(240, 240, 255);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  width: 100%;\n  ::placeholder {\n    color: #656979;\n  }\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n`\n\nexport default function AddressInputPanel({\n    id,\n    value,\n    onChange\n}) {\n    const handleInput = useCallback(\n        event => {\n            const input = event.target.value\n            const withoutSpaces = input.replace(/\\s+/g, '')\n            onChange(withoutSpaces)\n        },\n        [onChange]\n    )\n\n    return (\n        <div id=\"mainInput\">\n            <div className=\"input-container input-panel-border\">\n                <AutoColumn gap=\"md\">\n                    <RowBetween>\n                        Recipient\n                    </RowBetween>\n                    <Input\n                        className=\"input-panel\"\n                        type=\"text\"\n                        autoComplete=\"off\"\n                        autoCorrect=\"off\"\n                        autoCapitalize=\"off\"\n                        spellCheck=\"false\"\n                        placeholder=\"Wallet Address\"\n                        pattern=\"^(0x[a-fA-F0-9]{40})$\"\n                        onChange={handleInput}\n                        value={value}\n                    />\n                </AutoColumn>\n            </div>\n        </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/solana-logo.88dd9cd2.png\";","import React from 'react';\n\nexport default function LightModeIcon() {\n  return (\n    <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M7 10.8008C9.09911 10.8008 10.8008 9.09911 10.8008 7C10.8008 4.90088 9.09911 3.19922 7 3.19922C4.90088 3.19922 3.19922 4.90088 3.19922 7C3.19922 9.09911 4.90088 10.8008 7 10.8008Z\" fill=\"#838A91\" />\n      <path d=\"M7 2.23242C7.22652 2.23242 7.41016 2.04878 7.41016 1.82227V0.410156C7.41016 0.18364 7.22652 0 7 0C6.77348 0 6.58984 0.18364 6.58984 0.410156V1.82227C6.58984 2.04878 6.77348 2.23242 7 2.23242Z\" fill=\"#838A91\" />\n      <path d=\"M13.59 6.58984H12.1779C11.9514 6.58984 11.7678 6.77348 11.7678 7C11.7678 7.22652 11.9514 7.41016 12.1779 7.41016H13.59C13.8165 7.41016 14.0002 7.22652 14.0002 7C14.0002 6.77348 13.8165 6.58984 13.59 6.58984Z\" fill=\"#838A91\" />\n      <path d=\"M7 11.7676C6.77348 11.7676 6.58984 11.9512 6.58984 12.1777V13.5898C6.58984 13.8164 6.77348 14 7 14C7.22652 14 7.41016 13.8164 7.41016 13.5898V12.1777C7.41016 11.9512 7.22652 11.7676 7 11.7676Z\" fill=\"#838A91\" />\n      <path d=\"M2.23242 7C2.23242 6.77348 2.04878 6.58984 1.82227 6.58984H0.410156C0.18364 6.58984 0 6.77348 0 7C0 7.22652 0.18364 7.41016 0.410156 7.41016H1.82227C2.04878 7.41016 2.23242 7.22652 2.23242 7Z\" fill=\"#838A91\" />\n      <path d=\"M10.661 3.74901C10.7659 3.74901 10.8709 3.70898 10.951 3.62886L11.9495 2.63035C12.1097 2.47017 12.1097 2.21049 11.9495 2.05031C11.7893 1.89013 11.5296 1.89013 11.3694 2.05031L10.3709 3.04882C10.2107 3.209 10.2107 3.46868 10.3709 3.62886C10.451 3.70898 10.556 3.74901 10.661 3.74901Z\" fill=\"#838A91\" />\n      <path d=\"M10.951 10.3711C10.7908 10.2109 10.5311 10.2109 10.3709 10.3711C10.2107 10.5313 10.2107 10.791 10.3709 10.9511L11.3695 11.9496C11.4496 12.0297 11.5545 12.0698 11.6595 12.0698C11.7644 12.0698 11.8694 12.0297 11.9495 11.9496C12.1097 11.7894 12.1097 11.5298 11.9495 11.3696L10.951 10.3711Z\" fill=\"#838A91\" />\n      <path d=\"M3.04888 10.3711L2.05037 11.3696C1.89019 11.5298 1.89019 11.7895 2.05037 11.9497C2.13046 12.0298 2.23543 12.0698 2.34038 12.0698C2.44532 12.0698 2.55032 12.0298 2.63039 11.9497L3.6289 10.9512C3.78908 10.791 3.78908 10.5313 3.6289 10.3711C3.46877 10.2109 3.20903 10.2109 3.04888 10.3711Z\" fill=\"#838A91\" />\n      <path d=\"M3.04891 3.62886C3.129 3.70895 3.23397 3.74901 3.33892 3.74901C3.44386 3.74901 3.54886 3.70898 3.62892 3.62886C3.7891 3.46868 3.7891 3.209 3.62892 3.04882L2.63041 2.05031C2.47026 1.89013 2.21055 1.89013 2.05037 2.05031C1.89019 2.21049 1.89019 2.47017 2.05037 2.63035L3.04891 3.62886Z\" fill=\"#838A91\" />\n      <path d=\"M8.82944 2.59691C8.88093 2.61829 8.93422 2.62841 8.9867 2.62841C9.14745 2.62841 9.30005 2.53328 9.3656 2.37553L9.9075 1.07156C9.99442 0.862385 9.89533 0.622334 9.68615 0.535409C9.477 0.44851 9.23695 0.547549 9.14999 0.756756L8.60809 2.06072C8.5212 2.26993 8.62029 2.50998 8.82944 2.59691Z\" fill=\"#838A91\" />\n      <path d=\"M13.2429 9.15007L11.9389 8.60817C11.7297 8.52125 11.4897 8.62031 11.4028 8.82952C11.3159 9.0387 11.415 9.27875 11.6241 9.36568L12.9281 9.90758C12.9796 9.92896 13.0329 9.93908 13.0854 9.93908C13.2461 9.93908 13.3987 9.84395 13.4643 9.6862C13.5512 9.47705 13.4521 9.237 13.2429 9.15007Z\" fill=\"#838A91\" />\n      <path d=\"M5.17072 11.4026C4.96151 11.3157 4.72149 11.4147 4.63457 11.6239L4.09267 12.9279C4.00574 13.1371 4.10484 13.3771 4.31401 13.4641C4.3655 13.4855 4.4188 13.4956 4.47127 13.4956C4.63202 13.4956 4.78463 13.4004 4.85017 13.2427L5.39207 11.9387C5.47897 11.7296 5.37987 11.4895 5.17072 11.4026Z\" fill=\"#838A91\" />\n      <path d=\"M0.756825 4.85003L2.06079 5.39192C2.11228 5.41331 2.16557 5.42342 2.21805 5.42342C2.3788 5.42342 2.53141 5.32829 2.59695 5.17055C2.68387 4.96137 2.58478 4.72132 2.3756 4.63439L1.07163 4.09252C0.862454 4.00565 0.622403 4.10469 0.535477 4.31387C0.448552 4.52305 0.547645 4.7631 0.756825 4.85003Z\" fill=\"#838A91\" />\n      <path d=\"M11.4068 5.18035C11.4721 5.33853 11.6249 5.4341 11.786 5.4341C11.8382 5.4341 11.8912 5.42409 11.9424 5.40296L13.2476 4.86409C13.457 4.77766 13.5567 4.53785 13.4702 4.32846C13.3838 4.11906 13.1439 4.01942 12.9346 4.10585L11.6294 4.64471C11.42 4.73117 11.3203 4.97098 11.4068 5.18035Z\" fill=\"#838A91\" />\n      <path d=\"M9.35484 11.6292C9.2684 11.4198 9.02855 11.3202 8.8192 11.4066C8.6098 11.4931 8.51014 11.7329 8.59657 11.9423L9.13543 13.2475C9.20076 13.4057 9.35361 13.5013 9.51472 13.5013C9.56686 13.5013 9.61988 13.4913 9.67107 13.4701C9.88047 13.3837 9.98013 13.1438 9.8937 12.9345L9.35484 11.6292Z\" fill=\"#838A91\" />\n      <path d=\"M2.59307 8.8192C2.50664 8.60983 2.26689 8.5101 2.05743 8.59659L0.752182 9.13546C0.542811 9.22189 0.443116 9.46169 0.529549 9.67109C0.594873 9.82927 0.747697 9.92484 0.908834 9.92484C0.960951 9.92484 1.014 9.91483 1.06519 9.8937L2.37044 9.35483C2.57984 9.26837 2.6795 9.02857 2.59307 8.8192Z\" fill=\"#838A91\" />\n      <path d=\"M4.64483 2.37057C4.71016 2.52875 4.86301 2.62432 5.02412 2.62432C5.07626 2.62432 5.12928 2.61431 5.18047 2.59317C5.38987 2.50674 5.48953 2.26694 5.4031 2.05754L4.86424 0.752284C4.77778 0.542886 4.53792 0.443245 4.3286 0.529679C4.1192 0.616112 4.01954 0.855944 4.10597 1.06532L4.64483 2.37057Z\" fill=\"#838A91\" />\n    </svg>\n  );\n}","import React from 'react';\n\nexport default function DarkModeIcon() {\n  return (\n    <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <mask id=\"path-1-inside-1\" fill=\"white\">\n        <path d=\"M1.00769 7.76601C0.795753 4.18171 3.45097 1.11019 6.93973 0.903907C7.89331 0.847524 8.80994 1.01159 9.64421 1.35294C7.55082 2.51304 6.19089 4.84582 6.3449 7.45043C6.49891 10.055 8.12426 12.2113 10.3399 13.1185C9.55154 13.5539 8.66063 13.8249 7.70705 13.8812C4.21829 14.0875 1.21962 11.3503 1.00769 7.76601Z\" />\n      </mask>\n      <path d=\"M8.38988 1.54633L29.8921 27.8837L85.7793 -17.7434L15.0151 -31.8019L8.38988 1.54633ZM9.07139 13.0724L19.5496 45.4175L88.2699 23.1556L27.32 -15.6154L9.07139 13.0724ZM8.979 35.393C6.69461 35.528 4.26387 35.3911 1.76467 34.8946L15.0151 -31.8019C11.5909 -32.4822 8.21038 -32.6804 4.96529 -32.4885L8.979 35.393ZM-13.1123 -24.791C-23.3391 -16.4417 -28.907 -3.65987 -28.1295 9.48884L39.7519 5.47513C40.2564 14.0068 36.665 22.3542 29.8921 27.8837L-13.1123 -24.791ZM-28.1295 9.48884C-27.3521 22.6376 -20.3167 34.6742 -9.17725 41.7601L27.32 -15.6154C34.6974 -10.9225 39.2474 -3.05657 39.7519 5.47513L-28.1295 9.48884ZM-1.4068 -19.2727C0.979995 -20.0459 3.36663 -20.4718 5.66778 -20.6078L9.68149 47.2736C12.9433 47.0808 16.2624 46.4824 19.5496 45.4175L-1.4068 -19.2727ZM5.66778 -20.6078C22.0832 -21.5784 34.6189 -8.87166 35.4821 5.7276L-32.3993 9.74131C-31.1487 30.8914 -13.1102 48.6213 9.68149 47.2736L5.66778 -20.6078ZM35.4821 5.7276C36.3454 20.3269 25.3944 34.4224 8.979 35.393L4.96529 -32.4885C-17.8263 -31.1408 -33.6499 -11.4088 -32.3993 9.74131L35.4821 5.7276ZM10.3399 13.1185L43.2188 72.6414L167.506 3.98823L36.1052 -49.8113L10.3399 13.1185ZM9.64421 1.35294L42.6049 60.8306L166.616 -7.89243L35.3949 -61.5827L9.64421 1.35294ZM2.92602 -66.9775C-39.7698 -64.453 -69.1995 -27.5539 -66.8738 11.7797L68.8891 3.7523C70.791 35.9173 46.6718 66.6734 10.9534 68.7853L2.92602 -66.9775ZM-66.8738 11.7797C-64.548 51.1134 -30.9751 84.2872 11.7208 81.7627L3.69334 -54.0002C39.4117 -56.1122 66.9873 -28.4127 68.8891 3.7523L-66.8738 11.7797ZM11.7208 81.7627C23.1208 81.0886 33.839 77.8225 43.2188 72.6414L-22.539 -46.4045C-14.7359 -50.7147 -5.79955 -53.4389 3.69334 -54.0002L11.7208 81.7627ZM36.1052 -49.8113C57.8606 -40.9039 72.8225 -20.3061 74.2263 3.43672L-61.5365 11.4641C-59.8247 40.4161 -41.6121 65.3266 -15.4254 76.0482L36.1052 -49.8113ZM74.2263 3.43672C75.6297 27.1705 63.2053 49.4145 42.6049 60.8306L-23.3164 -58.1247C-48.1036 -44.3885 -63.2479 -17.4789 -61.5365 11.4641L74.2263 3.43672ZM35.3949 -61.5827C25.4003 -65.6722 14.3288 -67.6518 2.92602 -66.9775L10.9534 68.7853C1.4578 69.3468 -7.78038 67.6953 -16.1065 64.2886L35.3949 -61.5827Z\" fill=\"white\" mask=\"url(#path-1-inside-1)\" />\n    </svg>\n  );\n}","import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport styles from '../../scss/DarkModeSwitch.module.scss';\nimport LightModeIcon from '../icons/LightModeIcon';\nimport DarkModeIcon from '../icons/DarkModeIcon';\n\nfunction DarkModeSwitch() {\n    const [mode, setMode] = useState('light');\n\n    const handleDarkMode = () => {\n        const currentMode = window.localStorage.getItem('mode');\n        const newMode = currentMode === 'light' ? 'dark' : 'light';\n        updateScss(newMode);\n        setMode(newMode);\n        window.localStorage.setItem('mode', newMode);\n    };\n\n    const updateScss = (mode) => {\n        const root = document.documentElement;\n        if (mode === \"light\") {\n            document.body.classList.add(`light-mode`);\n        } else {\n            document.body.classList.remove(`light-mode`);\n        }\n        root.style.setProperty(\n            '--sol-balance-background',\n            mode === \"light\" ? '#e6f5ff' : 'black'\n        );\n        root.style.setProperty(\n            '--input-panel-border',\n            mode === \"light\" ? '#F0F0FF' : '#222121'\n        );\n    }\n\n    useEffect(() => {\n        let currentMode = window.localStorage.getItem('mode');\n        updateScss(currentMode);\n        setMode(currentMode);\n    }, [mode]);\n\n    return (\n        <button type=\"button\" className={clsx(styles.root, { [styles.darkModeEnabled]: mode !== 'light' })} onClick={handleDarkMode}>\n            <div className={styles.track} />\n            <div className={styles.knob}>\n                <div className={styles.lightModeIcon}>\n                    <LightModeIcon />\n                </div>\n                <div className={styles.darkModeIcon}>\n                    <DarkModeIcon />\n                </div>\n            </div>\n        </button>\n    );\n}\n\nexport default DarkModeSwitch;","import React, { useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { Box } from '@chakra-ui/layout';\nimport { Connection, clusterApiUrl } from '@solana/web3.js';\nimport { Card, Row, Col, Button, Image } from 'react-bootstrap';\nimport {\n    network,\n    devnetUrl,\n    localnetUrl,\n    explorerLink,\n} from '../../utils/constants';\nimport Connect from '../Connect';\nimport { AutoColumn } from '../Column';\nimport SocialLinks from '../SocialLinks';\nimport FeeInputPanel from '../FeeInputPanel';\nimport AmountInputPanel from '../AmountInputPanel';\nimport AddressInputPanel from '../AddressInputPanel';\nimport { signAndSendTransaction, } from '../../utils/mics';\nimport {\n    getSolBalance,\n    createAndSendTestTokens,\n} from '../../utils/api';\nimport SolanaLogo from '../../assets/solana-logo.png';\nimport DarkModeSwitch from '../DarkModeSwitch/DarkModeSwitch';\n\nexport default function Main() {\n    const [connection] = useState(\n        new Connection(\n            network === \"devnet\" ?\n                devnetUrl :\n                (network === \"localnet\" ?\n                    localnetUrl :\n                    clusterApiUrl(network)\n                )\n        )\n    );\n\n    const [error, setError] = useState(\"\");\n    const [message, setMessage] = useState(\"\");\n\n    const [amount, setAmount] = useState(\"\");\n    const [recipient, setRecipient] = useState(\"\");\n    const [solBalance, setSolBalance] = useState(\"\");\n    const [tokenBalance, setTokenBalance] = useState(\"\");\n    const [solletWallet, setSollectWallet] = useState();\n\n    const [isConnected, setIsConnected] = useState(false);\n    const [walletAddress, setWalletAddress] = useState(\"\");\n    const [selectedTokenData, setSelectedTokenData] = useState({});\n    const [showCreateAccount, setShowCreateAccount] = useState(false);\n    const [creatingAccount, setCreatingAccount] = useState(false);\n    const [executing, setExecuting] = useState(false);\n    const [updateBalance, setUpdateBalance] = useState(false);\n    const [txSignature, setTxSignature] = useState(\"\");\n    const [openConnectModal, setOpenConnectModal] = useState(false);\n    const [transactionFee, setTransactionFee] = useState(\"\");\n    const [feeTokenBalance, setFeeTokenBalance] = useState(\"\");\n    const [selectedFeeTokenData, setSelectedFeeTokenData] = useState({});\n    const [accountToCreate, setAccountToCreate] = useState(\"\");\n\n    const handleValidateAndTransfer = async () => {\n        let errorMsg = \"\";\n\n        if (!recipient && recipient.length !== 44) {\n            errorMsg = \"Invalid recipient address.\";\n        } else if (!selectedTokenData || !selectedTokenData.address) {\n            errorMsg = \"Please select the token.\";\n        } else if (amount === \"\") {\n            errorMsg = \"Amount can not be null.\";\n        } else if (new BigNumber(amount).gt(new BigNumber(tokenBalance))) {\n            errorMsg = \"Amount should not be greater than available balance.\";\n        } else if (!selectedFeeTokenData || !selectedFeeTokenData.address) {\n            errorMsg = \"Please select the token.\";\n        } else if (transactionFee.gt(new BigNumber(feeTokenBalance))) {\n            errorMsg = \"Insufficient balance to cover transaction fee.\";\n        } else if (\n            selectedTokenData.address === selectedFeeTokenData.address &&\n            new BigNumber(amount).plus(transactionFee).gt(new BigNumber(tokenBalance))\n        ) {\n            errorMsg = \"Insufficient balance to cover transaction fee.\";\n        } else {\n            handleTransferSplToken();\n        }\n\n        handleError(errorMsg);\n    }\n\n    const handleTransferSplToken = () => {\n        setExecuting(true);\n\n        signAndSendTransaction(\n            connection,\n            solletWallet,\n            recipient,\n            amount,\n            selectedTokenData,\n            selectedFeeTokenData,\n        )\n            .then((result) => {\n                setExecuting(false);\n                handleMesage(\n                    \"Transfer Submitted 🎉\",\n                    result.data.txSignature,\n                    false,\n                );\n\n                let interval = setInterval(async () => {\n                    let status = await connection.getSignatureStatus(\n                        result.data.txSignature\n                    );\n\n                    if (status.value?.confirmationStatus === \"finalized\") {\n                        setUpdateBalance(true);\n                        setAmount(\"\");\n                        setMessage(\"\");\n                        clearInterval(interval);\n                    }\n                }, 1000)\n            })\n            .catch((error) => {\n                setExecuting(false);\n                handleError(error.message);\n            });\n    }\n\n    const handleCreateAccount = () => {\n        setCreatingAccount(true);\n\n        createAndSendTestTokens\n            (\n                accountToCreate,\n                walletAddress\n            )\n            .then((result) => {\n                setShowCreateAccount(false);\n                setCreatingAccount(false);\n                handleMesage(\n                    \"Account created successfully 🎉\",\n                    result.data.txSignature,\n                    false,\n                );\n\n                let interval = setInterval(async () => {\n                    let status = await connection.getSignatureStatus(\n                        result.data.txSignature\n                    );\n\n                    console.log(status.value?.confirmationStatus)\n                    if (status.value?.confirmationStatus === \"finalized\") {\n                        if (accountToCreate === selectedTokenData.address) {\n                            setUpdateBalance(true);\n                        }\n                        setAccountToCreate(\"\");\n                        setMessage(\"\");\n                        clearInterval(interval);\n                    }\n                }, 1000)\n            })\n            .catch((error) => {\n                setCreatingAccount(false);\n                handleError(error.message);\n            });\n    }\n\n    const handleChangeRecipient = (value) => {\n        setRecipient(value)\n    }\n\n    const handleChangeAmount = (value) => {\n        setAmount(value)\n    }\n\n    const handleSelectToken = (tokenData) => {\n        setSelectedTokenData(tokenData);\n    }\n\n    const handleSetTokenBalance = (value) => {\n        setTokenBalance(value);\n        setShowCreateAccount(false);\n    }\n\n    const handleSelectFeeToken = (tokenData) => {\n        setSelectedFeeTokenData(tokenData);\n    }\n\n    const handleSetFeeTokenBalance = (value) => {\n        setFeeTokenBalance(value);\n    }\n\n    const handleOpenConnectModal = () => {\n        if (!isConnected)\n            setOpenConnectModal(true);\n    }\n\n    const handleTransactionFee = (value) => {\n        setTransactionFee(value);\n    }\n\n    const handleOnWalletConnect = async (wallet) => {\n        setIsConnected(true);\n        setSollectWallet(wallet);\n        const publicKey = wallet.publicKey;\n        setWalletAddress(publicKey.toString());\n        console.log('Connected to ' + publicKey.toBase58())\n\n        const sol = await getSolBalance(connection, publicKey);\n        if (sol) {\n            setSolBalance(sol.uiBalance);\n        }\n\n        if (selectedTokenData && selectedTokenData.address) {\n            setUpdateBalance(true);\n        }\n    }\n\n    const handleOnWalletDisconnect = (wallet) => {\n        setIsConnected(false);\n        console.log('Wallet Disconnected');\n    }\n\n    const handleError = (message) => {\n        setError(message);\n\n        setTimeout(() => {\n            setError(\"\");\n        }, 4000);\n    }\n\n    const handleMesage = (\n        message,\n        signature,\n        enableTimeout,\n    ) => {\n        setMessage(message);\n\n        if (signature) {\n            setTxSignature(signature);\n        }\n\n        if (enableTimeout) {\n            setTimeout(() => {\n                setMessage(\"\");\n            }, !signature ? 4000 : 10000);\n        }\n    }\n\n    return (\n        <main className=\"homepage\">\n            {/* Navigation*/}\n            <nav className=\"navbar navbar-expand-lg navbar-light py-3\" id=\"mainNav\">\n                <div className=\"container\" style={{ marginTop: \"0.5rem\" }}>\n                    <div className=\"js-scroll-trigger logo\"></div>\n\n                    <div>\n                        <ul className=\"navbar-nav ml-auto my-2 my-lg-0\">\n                            {isConnected && solBalance !== \"\" ?\n                                <li className=\"nav-item\">\n                                    <div className=\"sol-balance\">\n                                        <span style={{ marginRight: \"5px\" }}>\n                                            {solBalance.toFixed(2)}\n                                        </span>\n                                        <Image width=\"20px\" src={SolanaLogo}></Image>\n                                    </div>\n                                </li>\n                                : null\n                            }\n\n                            <li className=\"nav-item\">\n                                <DarkModeSwitch />\n                            </li>\n\n                            <li className=\"nav-item\">\n                                <Button\n                                    variant=\"outline-success nav-button\"\n                                    onClick={handleOpenConnectModal}\n                                >\n                                    {!isConnected ?\n                                        <span>CONNECT</span> :\n                                        <a\n                                            className=\"nav-link\"\n                                            href={`${explorerLink}/address/${walletAddress}?cluster=${network}`}\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                        >\n                                            {walletAddress.substr(0, 4)}\n                                            ...\n                                            {walletAddress.substr(\n                                                walletAddress.length - 4,\n                                                walletAddress.length - 1,\n                                            )}\n                                        </a>\n                                    }\n                                </Button>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n\n            {/* Main*/}\n            <header className=\"homepage\" id=\"\">\n                <div className=\"container h-100\">\n                    <div className=\"row h-100 align-items-center justify-content-center text-center\">\n                        <Card>\n                            <Card.Body>\n                                <AutoColumn gap=\"20px\">\n                                    <AddressInputPanel\n                                        id=\"recipient\"\n                                        value={recipient}\n                                        onChange={handleChangeRecipient}\n                                    />\n\n                                    <AmountInputPanel\n                                        connection={connection}\n                                        account={walletAddress}\n                                        value={amount}\n                                        onChangeAmount={handleChangeAmount}\n                                        onSelectToken={handleSelectToken}\n                                        onTokenBalance={handleSetTokenBalance}\n                                        onSetShowCreateAccount={\n                                            (address) => {\n                                                setTokenBalance(\"\");\n                                                setAccountToCreate(address);\n                                                setShowCreateAccount(true)\n                                            }\n                                        }\n                                        onError={handleError}\n                                        updateBalance={updateBalance}\n                                        updatedAddress={selectedTokenData.address}\n                                        setBalanceUpdated={() => setUpdateBalance(false)}\n                                    />\n\n                                    <FeeInputPanel\n                                        connection={connection}\n                                        account={walletAddress}\n                                        onSelectToken={handleSelectFeeToken}\n                                        onTokenBalance={handleSetFeeTokenBalance}\n                                        onTransactionFee={handleTransactionFee}\n                                        onError={handleError}\n                                        recipient={recipient}\n                                        amount={amount}\n                                        tokenAddress={selectedTokenData.address}\n                                        onSetShowCreateAccount={\n                                            (address) => {\n                                                setTokenBalance(\"\");\n                                                setAccountToCreate(address);\n                                                setShowCreateAccount(true)\n                                            }\n                                        }\n                                    />\n\n                                    {error ?\n                                        <div className=\"error-msg\">\n                                            {error}\n                                        </div>\n                                        : null\n                                    }\n\n                                    {message ?\n                                        <div className=\"message\">\n                                            {message}\n                                            <div>\n                                                {txSignature ?\n                                                    <div>\n                                                        <a\n                                                            href={`${explorerLink}/tx/${txSignature}?cluster=${network}`}\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                        >\n                                                            <strong>Click here</strong>\n                                                        </a>\n                                                        <span> to see tx execution on the solana explorer.</span>\n                                                    </div>\n                                                    : null\n                                                }\n                                            </div>\n                                        </div>\n                                        : null\n                                    }\n\n                                    <Row className=\"text-center\">\n                                        <Col>\n                                            {isConnected ? (\n                                                showCreateAccount ?\n                                                    < Button\n                                                        onClick={handleCreateAccount}\n                                                        variant=\"outline-success\"\n                                                    >\n                                                        {creatingAccount ?\n                                                            <div className=\"d-flex align-items-center\">\n                                                                Creating Account\n                                                            <span className=\"loading ml-2\"></span>\n                                                            </div>\n                                                            :\n                                                            <div>Create Account</div>\n                                                        }\n                                                    </Button>\n                                                    :\n                                                    <Button\n                                                        onClick={handleValidateAndTransfer}\n                                                        variant=\"outline-success\"\n                                                        disabled={\n                                                            showCreateAccount &&\n                                                            selectedTokenData.symbol !== \"MetaSPL\"\n                                                        }\n                                                    >\n                                                        {executing ?\n                                                            <div className=\"d-flex align-items-center\">\n                                                                Executing\n                                                            <span className=\"loading ml-2\"></span>\n                                                            </div>\n                                                            :\n                                                            <div>Submit</div>\n                                                        }\n                                                    </Button>\n                                            ) :\n                                                <Button\n                                                    onClick={handleOpenConnectModal}\n                                                    variant=\"outline-success\"\n                                                >\n                                                    <div>Connect Wallet</div>\n                                                </Button>\n                                            }\n                                        </Col>\n                                    </Row>\n                                </AutoColumn>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </div>\n            </header>\n\n            {/* Footer*/}\n            <footer className=\"py-5\">\n                <div className=\"container\">\n                    <Box\n                        maxW=\"containerLg\"\n                        color=\"white\" d=\"flex\"\n                        justifyContent=\"space-between\"\n                    >\n                        <div className=\"copyright\">\n                            Copyright © 2021 - MetaSol\n                        </div>\n                        <SocialLinks />\n                    </Box>\n                </div>\n            </footer>\n\n            {openConnectModal ?\n                <Connect\n                    onConnected={(wallet) => handleOnWalletConnect(wallet)}\n                    onDisconnected={handleOnWalletDisconnect}\n                    onClose={() => setOpenConnectModal(false)}\n                    onError={handleError}\n                /> : null\n            }\n        </main >\n    );\n}\n","import React from 'react';\nimport Main from './components/Main';\n\nexport default function App() {\n    return (\n        <div id=\"app\">\n            <Main />\n        </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ReactGA from 'react-ga';\nimport { config } from 'dotenv';\nimport './scss/styles.scss';\nimport reportWebVitals from './reportWebVitals';\n\nconfig();\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nReactGA.initialize(\n    process.env.REACT_APP_GOOGLE_ANALYTICS_ID\n);\n\nReactGA.pageview(\n    window.location.pathname + window.location.search\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"DarkModeSwitch_root__1CLEN\",\"track\":\"DarkModeSwitch_track__1Tt5c\",\"knob\":\"DarkModeSwitch_knob__1GX3z\",\"lightModeIcon\":\"DarkModeSwitch_lightModeIcon__3yi30\",\"darkModeIcon\":\"DarkModeSwitch_darkModeIcon__1gMlP\",\"darkModeEnabled\":\"DarkModeSwitch_darkModeEnabled__a7HCP\"};","import {\n    PublicKey,\n    SYSVAR_CLOCK_PUBKEY,\n    Transaction,\n    TransactionInstruction,\n} from '@solana/web3.js';\nimport ReactGA from 'react-ga';\nimport BigNumber from 'bignumber.js';\nimport {\n    FEE_PAYER_PUBLIC_KEY,\n    METASOL_PROGRAM_ID,\n    processTxLayout,\n    TOKEN_PROGRAM_ID,\n    METASOL_PUBLIC_KEY,\n    transferCheckedLayout,\n} from \"./constants\";\nimport { u64 } from './uint64';\nimport {\n    sendToRelayer,\n    getTokenAccounts,\n    getAssociatedTokenAddress,\n    createAssociatedTokenAccountInstruction,\n    calculateFeeInSol,\n    getFeeInToken,\n} from './api';\n\nexport const getChainId = (network) => {\n    let chainId = 0;\n\n    switch (network) {\n        case \"mainnet-beta\":\n            chainId = 101;\n            break;\n        case \"testnet\":\n            chainId = 102;\n            break;\n        case \"devnet\":\n            chainId = 103;\n            break;\n        default:\n            chainId = 102;\n            break;\n    }\n\n    return chainId;\n}\n\nexport const signAndSendTransaction = (\n    connection,\n    solletWallet,\n    recipient,\n    transferAmount,\n    selectedTokenData,\n    selectedFeeTokenData,\n) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const senderSplAccount = await getAssociatedTokenAddress(\n                selectedTokenData.address, solletWallet.publicKey.toString(),\n            );\n            const recipientSplAccount = await getAssociatedTokenAddress(\n                selectedTokenData.address, recipient,\n            );\n\n            const mintPublicKey = new PublicKey(selectedTokenData.address);\n\n            const amount = Number(\n                new BigNumber(transferAmount).times(\n                    new BigNumber(10).exponentiatedBy(\n                        new BigNumber(selectedTokenData.decimals)\n                    )\n                )\n            );\n\n            const transferInstruction = createTransferCheckedInstruction(\n                senderSplAccount,\n                mintPublicKey,\n                recipientSplAccount,\n                solletWallet.publicKey,\n                [],\n                amount,\n                selectedTokenData.decimals\n            );\n\n            const recentBlock = await connection.getRecentBlockhash();\n            const tempTransaction = new Transaction({\n                feePayer: FEE_PAYER_PUBLIC_KEY,\n                recentBlockhash: recentBlock.blockhash\n            });\n\n            if (\n                !await isSplAccountExists(\n                    connection,\n                    selectedTokenData.address,\n                    recipient\n                )\n            ) {\n                const createInstruction =\n                    createAssociatedTokenAccountInstruction(\n                        mintPublicKey,\n                        recipientSplAccount,\n                        new PublicKey(recipient),\n                        FEE_PAYER_PUBLIC_KEY,\n                    );\n\n                tempTransaction.add(createInstruction);\n            }\n\n            const transaction = await createMetasolTransaction(\n                connection,\n                tempTransaction,\n                transferInstruction,\n                solletWallet.publicKey,\n                selectedFeeTokenData\n            );\n\n            const signedTx = await solletWallet.signTransaction(transaction);\n\n            const bufferTx = signedTx.serialize({\n                verifySignatures: false\n            });\n\n            const result = await sendToRelayer(bufferTx);\n            resolve(result);\n\n            ReactGA.event({\n                category: 'Transfer',\n                action: 'Executed',\n                label: amount.toString(),\n            });\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\nconst isSplAccountExists = (connection, mint, address) => {\n    return new Promise(async (resolve) => {\n        const splAccounts =\n            await getTokenAccounts(\n                connection, mint, address\n            );\n\n        resolve(splAccounts.length !== 0);\n    })\n}\n\nconst createMetasolTransaction = async (\n    connection,\n    transaction,\n    txInstruction,\n    senderAuthority,\n    feeSplToken,\n) => {\n    const feeSplTokenAddress = feeSplToken.address;\n    const senderSplAccount = await getAssociatedTokenAddress(\n        feeSplTokenAddress, senderAuthority.toString(),\n    );\n    const feePayerSplAccount = await getAssociatedTokenAddress(\n        feeSplTokenAddress, FEE_PAYER_PUBLIC_KEY.toString(),\n    );\n\n    const feeTokenPublicKey = new PublicKey(feeSplTokenAddress);\n\n    const metasolKeys = [\n        { pubkey: txInstruction.programId, isSigner: false, isWritable: false },\n        { pubkey: METASOL_PUBLIC_KEY, isSigner: false, isWritable: true },\n\n        { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n\n        { pubkey: senderSplAccount, isSigner: false, isWritable: true },\n        { pubkey: senderAuthority, isSigner: false, isWritable: false },\n        { pubkey: feePayerSplAccount, isSigner: false, isWritable: true },\n\n        { pubkey: feeTokenPublicKey, isSigner: false, isWritable: false },\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    const keys = txInstruction.keys.concat(metasolKeys);\n\n    const transactionFee = await calculateFeeInSol(connection, 2);\n\n    const txFee = await getFeeInToken(\n        feeSplToken.extensions.coingeckoId,\n        feeSplToken.decimals,\n        transactionFee,\n    );\n\n    const slot = await connection.getSlot();\n\n    const data = Buffer.alloc(48);\n    processTxLayout.encode(\n        {\n            instruction: 1,\n            fee: new u64(txFee.amount).toBuffer(),\n            expiry_block: new u64(slot + 100).toBuffer(),\n            required_accounts_length: txInstruction.keys.length,\n            instruction_data: txInstruction.data,\n        },\n        data,\n    );\n\n    if (\n        !await isSplAccountExists(\n            connection,\n            feeSplTokenAddress,\n            FEE_PAYER_PUBLIC_KEY.toString()\n        )\n    ) {\n        const feePayerAccountInstruction =\n            createAssociatedTokenAccountInstruction(\n                feeTokenPublicKey, // Token mint key\n                feePayerSplAccount, // Token account\n                FEE_PAYER_PUBLIC_KEY, // Owner\n                FEE_PAYER_PUBLIC_KEY, // Payer\n            );\n\n        transaction.add(feePayerAccountInstruction);\n    }\n\n    const processTxInstruction = new TransactionInstruction({\n        keys,\n        programId: METASOL_PROGRAM_ID,\n        data,\n    });\n\n    transaction.add(processTxInstruction);\n\n    return transaction;\n}\n\nfunction createTransferCheckedInstruction(\n    source,\n    mint,\n    destination,\n    owner,\n    multiSigners,\n    amount,\n    decimals,\n) {\n    const data = Buffer.alloc(transferCheckedLayout.span);\n\n    transferCheckedLayout.encode(\n        {\n            instruction: 12, // TransferChecked instruction\n            amount: new u64(amount).toBuffer(),\n            decimals,\n        },\n        data,\n    );\n\n    let keys = [\n        { pubkey: source, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ];\n    if (multiSigners.length === 0) {\n        keys.push({\n            pubkey: owner,\n            isSigner: true,\n            isWritable: false,\n        });\n    } else {\n        keys.push({ pubkey: owner, isSigner: false, isWritable: false });\n        multiSigners.forEach((signer) =>\n            keys.push({\n                pubkey: signer.publicKey,\n                isSigner: true,\n                isWritable: false,\n            }),\n        );\n    }\n\n    return new TransactionInstruction({\n        keys,\n        programId: TOKEN_PROGRAM_ID,\n        data,\n    });\n}\n"],"sourceRoot":""}