{"version":3,"sources":["utils/uint64.js","utils/constants.js","components/Connect/Sollet/index.js","components/Connect/Phantom/index.js","components/Connect/index.js","components/Column/index.js","components/ExternalLink/index.js","components/SocialLinks/index.js","components/SocialLinks/constants.js","components/BetaWarning/index.js","components/Row/index.js","components/FeeInputPanel/index.js","components/NumericInput/index.js","components/AmountInputPanel/index.js","components/AddressInputPanel/index.js","assets/solana-logo.png","components/icons/LightModeIcon.js","components/icons/DarkModeIcon.js","components/DarkModeSwitch/DarkModeSwitch.js","components/Main/index.js","App.js","reportWebVitals.js","index.js","utils/api.js","utils/mics.js","scss/DarkModeSwitch.module.scss"],"names":["u64","a","reverse","b","Buffer","from","length","assert","zeroPad","alloc","copy","buffer","BN","map","i","toString","slice","join","config","devnetUrl","localnetUrl","providerUrl","explorerLink","fee","Number","process","network","coingeckoApi","relayerUrl","METASOL_PROGRAM_ID","PublicKey","METASOL_PUBLIC_KEY","FEE_PAYER_PUBLIC_KEY","uint64Layout","property","BufferLayout","processTxLayout","vecU8","transferCheckedLayout","SolletAdapter","isInstalled","connect","wallet","Wallet","PhantomAdapter","window","solana","isPhantom","open","Connect","onConnected","onDisconnected","onClose","onError","useState","key","name","logo","availableAdapters","setAvailableAdapters","handleConnectWallet","event","handleCloseModal","walletAdpater","getWalletAdapter","on","_","selectedAdapter","useEffect","tempAdapters","adapter","adapterDetail","updateIsAdapterInstalled","Modal","show","onHide","animation","Header","closeButton","Title","Body","element","className","onClick","Image","width","src","style","marginRight","Column","styled","div","AutoColumn","gap","justify","ExternalLink","target","href","rel","rest","ctrlKey","metaKey","ReactGA","outboundLink","label","console","debug","preventDefault","location","socialLinkItems","url","categories","isExternal","headerNav","filter","item","includes","Icon","size","iconContent","viewBox","xmlns","fillRule","clipRule","strokeLinejoin","strokeMiterlimit","d","height","w","h","borderRadius","SocialLinks","spacing","BetaMessage","BetaWarning","showBetaMessage","setShowBetaMessage","result","localStorage","getItem","Boolean","id","marginBottom","border","setItem","role","aria-label","marginLeft","Row","Box","align","padding","RowBetween","LabelRow","FeeInputPanel","connection","account","onSelectToken","onTokenBalance","onTransactionFee","recipient","amount","tokenAddress","onSetNoFeeTokenAccount","onSetSenderFeeTokenAccount","transactionFee","updateTxFee","onTxFeeUpdate","updateFeeTokenBalance","onFeeTokenBalanceUpdate","match","useRouteMatch","decimals","symbol","address","extensions","coingeckoId","logoURI","allTokens","setAllTokens","totalTransactionFee","setTotalTransactionFee","transactionFeeInUsd","setTransactionFeeInUsd","selectedTokenBalance","setSelectedTokenBalance","selectedTokenSymbol","setSelectedTokenSymbol","selectedTokenInfo","setSelectedTokenInfo","defaultFeeToken","setDefaultFeeToken","handleSelectToken","data","tokenInfo","getTokenAccounts","addresses","tokenAccount","pubkey","getAssociatedTokenAddress","assTokenAccount","getTokenBalance","balance","value","uiAmount","fetchAndUpdateTransactionFee","updateDefaultFeeToken","calculateFeeInSol","executionFee","getFeeInToken","txFee","totalFee","plus","multipliedBy","BigNumber","dividedBy","totalFeeInUsd","uiAmountUsd","toFixed","toLowerCase","params","feeToken","token","fetchAndSetDefaultFeeToken","defaultToken","feeTokenAddress","fetchDefaultFeeToken","chainId","getChainId","TokenListProvider","resolve","then","tokens","tokenList","filterByChainId","getList","concat","fetchTokenList","fontWeight","fontSize","color","display","cursor","DropdownButton","title","onSelect","e","Dropdown","Item","eventKey","Input","input","NumericInput","onChange","inputRegex","RegExp","enforcer","nextUserInput","test","replace","inputMode","autoComplete","autoCorrect","type","pattern","placeholder","minLength","maxLength","spellCheck","AmountInputPanel","onChangeAmount","onSetNoTokenAccount","updateBalance","updatedAddress","setBalanceUpdated","onSenderSplTokenAccount","ownTokensList","setOwnTokensList","filteredTokens","setFilteredTokens","openSelectTokenModal","setOpenSelectTokenModal","inputAmount","setInputAmount","amountInUsd","setAmountInUsd","selectedCurrencyBalance","setSelectedCurrencyBalance","selectedTokenCoingeckoId","setSelectedCoingeckoId","isUserSplTokenListUpdated","setIsUserSplTokenListUpdated","Map","tokenMap","setTokenMap","isUpdate","handleModalClose","userSplTokenAccount","userAccount","getSplTokenAccount","handleOnChangeAmount","reduce","set","mainTokens","fetchUserSplTokenAccounts","getParsedTokenAccountsByOwner","programId","TOKEN_PROGRAM_ID","allTokenAccounts","tempTokenAccounts","tokenMint","parsed","info","mint","tokenData","get","push","getAmountInUsd","newList","v1","toLocaleLowerCase","v2","v3","AddressInputPanel","handleInput","useCallback","withoutSpaces","autoCapitalize","LightModeIcon","fill","DarkModeIcon","mask","DarkModeSwitch","mode","setMode","updateScss","root","document","documentElement","body","classList","add","remove","setProperty","currentMode","clsx","styles","darkModeEnabled","newMode","track","knob","lightModeIcon","darkModeIcon","Main","Connection","clusterApiUrl","error","setError","message","setMessage","setAmount","setRecipient","solBalance","setSolBalance","tokenBalance","setTokenBalance","solletWallet","setSollectWallet","isConnected","setIsConnected","walletAddress","setWalletAddress","selectedTokenData","setSelectedTokenData","noTokenAccount","setNoTokenAccount","noFeeTokenAccount","setNoFeeTokenAccount","executing","setExecuting","setUpdateBalance","txSignature","setTxSignature","openConnectModal","setOpenConnectModal","setTransactionFee","selectedFeeTokenData","setSelectedFeeTokenData","feeTokenBalance","setFeeTokenBalance","senderFeeTokenAccount","setSenderFeeTokenAccount","senderSplTokenAccount","setSenderSplTokenAccount","setUpdateTxFee","setUpdateFeeTokenBalance","handleValidateAndTransfer","errorMsg","gt","handleTransferSplToken","handleError","log","signAndSendTransaction","handleMesage","interval","setInterval","getSignatureStatus","status","confirmationStatus","clearInterval","catch","handleOpenConnectModal","handleOnWalletConnect","publicKey","toBase58","getSolBalance","sol","uiBalance","setTimeout","signature","enableTimeout","marginTop","SolanaLogo","Button","variant","substr","Card","Col","disabled","maxW","justifyContent","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","initialize","pageview","pathname","search","Promise","reject","getBalance","Math","pow","owner","getTokenAccountsByOwner","accounts","getTokenAccountBalance","totalSigners","getRecentBlockhash","recentBlock","getFeeCalculatorForBlockhash","blockhash","feeCalulator","lamportsPerSignature","feeInLamport","getTokenAndSolPrice","tokenPrice","tokenPriceInSol","solPriceInUsd","oneLamportInSol","LAMPORTS_PER_SOL","feeInSol","times","feeInToken","feeInUsd","exponentiatedBy","getCurrentSolPrice","currentSolPrice","axios","tokenPriceInUsd","usdPriceInToken","usd","res","sendToRelayer","bufferTx","post","getAssociatedAccountCreationCost","getMinimumBalanceForRentExemption","Token","ASSOCIATED_TOKEN_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedAccount","payer","keys","isSigner","isWritable","SystemProgram","SYSVAR_RENT_PUBKEY","TransactionInstruction","transferAmount","recipientSplAccount","mintPublicKey","tempTransaction","Transaction","feePayer","recentBlockhash","accountCreationCost","recipientSplAccountInstruction","transferInstruction","createTransferCheckedInstruction","createMetasolTransaction","transaction","signTransaction","signedTx","serialize","verifySignatures","category","action","txInstruction","senderAuthority","feeSplToken","feeSplTokenAddress","feePayerSplAccount","feeTokenPublicKey","metasolKeys","SYSVAR_CLOCK_PUBKEY","getSlot","slot","encode","instruction","toBuffer","expiry_block","required_accounts_length","instruction_data","processTxInstruction","source","destination","multiSigners","span","forEach","signer","authority","associatedTokenAddr","module","exports"],"mappings":"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","file":"static/js/main.92a38b74.chunk.js","sourcesContent":["import BN from 'bn.js';\nimport assert from 'assert';\n\n/**\n * 64-bit value\n */\nexport class u64 extends BN {\n    /**\n     * Convert to Buffer representation\n     */\n    toBuffer() {\n        const a = super.toArray().reverse();\n        const b = Buffer.from(a);\n        if (b.length === 8) {\n            return b;\n        }\n        assert(b.length < 8, 'u64 too large');\n\n        const zeroPad = Buffer.alloc(8);\n        b.copy(zeroPad);\n        return zeroPad;\n    }\n\n    /**\n     * Construct a u64 from Buffer representation\n     */\n    static fromBuffer(buffer) {\n        assert(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n        return new BN(\n            [...buffer]\n                .reverse()\n                .map(i => `00${i.toString(16)}`.slice(-2))\n                .join(''),\n            16,\n        );\n    }\n}","import { PublicKey } from \"@solana/web3.js\";\nimport { vecU8 } from \"@project-serum/borsh\";\nimport * as BufferLayout from \"buffer-layout\";\nimport { config } from \"dotenv\";\nconfig();\n\nexport const devnetUrl = \"https://api.devnet.solana.com\";\nexport const localnetUrl = \"http://127.0.0.1:8899\";\nexport const providerUrl = \"https://www.sollet.io\";\nexport const explorerLink = \"https://solscan.io\";\nexport const fee = Number(process.env.REACT_APP_RELAYER_FEE) || 50;\nexport const network = process.env.REACT_APP_NETWORK || \"localnet\";\nexport const coingeckoApi = \"https://api.coingecko.com/api/v3\";\nexport const relayerUrl = process.env.REACT_APP_RELAYER_URL || \"http://localhost:5000\";\n\nexport const METASOL_PROGRAM_ID = new PublicKey(\n    'ErSvTPUJY2PhBp64qGEvFQALKdowYVFi6wjPzu8WdrGx',\n);\n\nexport const METASOL_PUBLIC_KEY = new PublicKey(\n    'DfL4bGjzMx7bgY7MDKEPy6oNDq6zfthomaLXtTh8eKh2',\n);\n\nexport const FEE_PAYER_PUBLIC_KEY = new PublicKey(\n    '7MR5acnJ5vAaJXd6DNndeLvuDLNvBYEYTBs27sWagGVy',\n);\n\nconst uint64Layout = (property = 'uint64') => {\n    return BufferLayout.blob(8, property);\n}\n\nexport const processTxLayout = BufferLayout.struct([\n    BufferLayout.u8('instruction'),\n    uint64Layout('fee'),\n    uint64Layout('expiry_block'),\n    BufferLayout.u8('required_accounts_length'),\n    vecU8('instruction_data'),\n]);\n\nexport const transferCheckedLayout = BufferLayout.struct([\n    BufferLayout.u8('instruction'),\n    uint64Layout('amount'),\n    BufferLayout.u8('decimals'),\n]);\n","import Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { providerUrl } from \"../../../utils/constants\";\n\nexport class SolletAdapter {\n    isInstalled = true;\n\n    connect = () => {\n        const wallet = new Wallet(providerUrl);\n        wallet.connect();\n        return wallet;\n    }\n}\n","export class PhantomAdapter {\n    isInstalled = window.solana && window.solana.isPhantom;\n\n    connect = () => {\n        if (this.isInstalled) {\n            window.solana.connect();\n            return window.solana;\n        } else {\n            window.open(\"https://phantom.app/\", \"_blank\");\n        }\n    }\n}\n","import React, { useEffect, useState } from 'react';\nimport { Image, Modal } from 'react-bootstrap';\nimport { SolletAdapter } from './Sollet';\nimport { PhantomAdapter } from './Phantom';\n\nexport default function Connect({\n    onConnected,\n    onDisconnected,\n    onClose,\n    onError,\n}) {\n    const [availableAdapters, setAvailableAdapters] = useState([\n        {\n            key: 0, name: 'Sollet', isInstalled: true,\n            logo: \"https://cdn.jsdelivr.net/gh/solana-labs/oyster@main/assets/wallets/sollet.svg\"\n        },\n        {\n            key: 1, name: \"Phantom\", isInstalled: false,\n            logo: \"https://phantom.app/img/logo.png\"\n        },\n    ]);\n\n    const handleConnectWallet = async (event) => {\n        try {\n            handleCloseModal();\n\n            const walletAdpater = getWalletAdapter(event);\n\n            const wallet = await walletAdpater.connect();\n\n            if (walletAdpater.isInstalled) {\n                wallet.on('connect', async (_) => {\n                    onConnected(wallet);\n                });\n\n                wallet.on('disconnect', () => {\n                    onDisconnected();\n                });\n            }\n        } catch (error) {\n            onError(error);\n        }\n    }\n\n    const getWalletAdapter = (selectedAdapter) => {\n        switch (Number(selectedAdapter)) {\n            case 0:\n                return new SolletAdapter();\n            case 1:\n                return new PhantomAdapter();\n            default:\n                break;\n        }\n    }\n\n    const updateIsAdapterInstalled = () => {\n        let tempAdapters = [...availableAdapters];\n\n        for (let i = 1; i <= availableAdapters.length - 1; i++) {\n            const adapter = getWalletAdapter(i);\n            let adapterDetail = {\n                ...tempAdapters[1],\n                isInstalled: adapter.isInstalled || false\n            }\n\n            tempAdapters[i] = adapterDetail;\n\n            if (i === availableAdapters.length - 1) {\n                setAvailableAdapters(tempAdapters);\n            }\n        }\n    }\n\n    const handleCloseModal = () => {\n        onClose();\n    }\n\n    useEffect(() => {\n        updateIsAdapterInstalled();\n        // eslint-disable-next-line\n    }, []);\n\n    return (\n        <>\n            <Modal show={true} onHide={handleCloseModal} animation={false} >\n                <Modal.Header closeButton>\n                    <Modal.Title>Connect Your Wallet</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {availableAdapters.map((element) => (\n                        <div\n                            className=\"modal-div\"\n                            key={element.key}\n                            onClick={() => handleConnectWallet(element.key)}\n                        >\n                            <Image\n                                width=\"20px\"\n                                src={element.logo}\n                                style={{ marginRight: \"1rem\" }}\n                            />\n                            {!element.isInstalled ?\n                                <span>Install </span> : null\n                            }\n                            {element.name}\n                        </div>\n                    ))}\n                </Modal.Body>\n            </Modal>\n        </>\n    );\n}\n","import styled from 'styled-components'\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`\nexport const ColumnCenter = styled(Column)`\n  width: 100%;\n  align-items: center;\n`\n\nexport const AutoColumn = styled.div`\n  display: grid;\n  grid-auto-rows: auto;\n  grid-row-gap: ${({ gap }) => (gap === 'sm' && '8px') || (gap === 'md' && '12px') || (gap === 'lg' && '24px') || gap};\n  justify-items: ${({ justify }) => justify && justify};\n`\n\nexport default Column\n","import ReactGA from 'react-ga';\n\n/**\n * Outbound link that handles firing google analytics events\n */\nexport function ExternalLink({\n    target = '_blank',\n    href,\n    rel = 'noopener noreferrer',\n    ...rest\n}) {\n    const handleClick = (event) => {\n        // don't prevent default, don't redirect if it's a new tab\n        if (target === '_blank' || event.ctrlKey || event.metaKey) {\n            ReactGA.outboundLink({ label: href }, () => {\n                console.debug('Fired outbound link event', href)\n            })\n        } else {\n            event.preventDefault()\n            // send a ReactGA event and then trigger a location change\n            ReactGA.outboundLink({ label: href }, () => {\n                window.location.href = href\n            })\n        }\n    }\n\n    // eslint-disable-next-line\n    return <a\n        target={target}\n        rel={rel}\n        href={href}\n        onClick={handleClick}\n        {...rest}\n    ></a>\n}\n","import React from 'react';\nimport { HStack, Box } from '@chakra-ui/react';\nimport { navItems } from './constants';\nimport { ExternalLink } from '../ExternalLink';\n\nconst socialLinkItems = navItems.filter(item => item.categories.includes('social'));\n\nfunction Icon({ name, className, size }) {\n    let iconContent = null;\n    switch (name) {\n        case 'Twitter':\n            iconContent = (\n                <svg\n                    viewBox=\"0 0 512 512\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    strokeLinejoin=\"round\"\n                    strokeMiterlimit=\"2\"\n                >\n                    <path\n                        className=\"metasolFill\"\n                        d=\"M256 0a256 256 0 110 512 256 256 0 010-512zm-45 392c113 0 175-94 175-175v-8c12-9 22-20 31-32-11 5-23 8-36 10 13-8 23-20 27-34-11 7-25 12-39 15a62 62 0 00-105 56c-51-3-96-27-126-65a62 62 0 0019 83c-10-1-20-3-28-8v1c0 30 21 54 49 60a61 61 0 01-27 1c7 25 30 42 57 43a124 124 0 01-91 25c27 18 59 28 94 28z\"\n                    />\n                </svg>\n            );\n            break;\n        case 'Youtube':\n            iconContent = (\n                <svg\n                    viewBox=\"0 0 512 512\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    strokeLinejoin=\"round\"\n                    strokeMiterlimit=\"2\"\n                >\n                    <path\n                        className=\"metasolFill\"\n                        d=\"M256 0a256 256 0 110 512 256 256 0 010-512zm153 179c-3-14-14-25-28-28-25-7-125-7-125-7s-100 0-125 7c-14 3-25 14-28 28-7 25-7 77-7 77s0 52 7 77c3 14 14 25 28 28 25 7 125 7 125 7s100 0 125-7c14-3 25-14 28-28 7-25 7-77 7-77s0-52-7-77zM224 304v-96l83 48-83 48z\"\n                    />\n                </svg>\n            );\n            break;\n        case 'Discord':\n            iconContent = (\n                <svg\n                    viewBox=\"0 0 512 512\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    strokeLinejoin=\"round\"\n                    strokeMiterlimit=\"2\"\n                    width=\"54\"\n                    height=\"54\"\n                >\n                    <path\n                        className=\"metasolFill\"\n                        d=\"M226.011 0H29.99C13.459 0 0 13.458 0 30.135v197.778c0 16.677 13.458 30.135 29.989 30.135h165.888l-7.754-27.063 18.725 17.408 17.7 16.384L256 292.571V30.135C256 13.458 242.542 0 226.011 0zm-56.466 191.05s-5.266-6.291-9.655-11.85c19.164-5.413 26.478-17.408 26.478-17.408-5.998 3.95-11.703 6.73-16.823 8.63-7.314 3.073-14.336 5.12-21.211 6.291-14.044 2.633-26.917 1.902-37.888-.146-8.339-1.61-15.507-3.95-21.504-6.29-3.365-1.317-7.022-2.926-10.68-4.974-.438-.293-.877-.439-1.316-.732-.292-.146-.439-.292-.585-.438-2.633-1.463-4.096-2.487-4.096-2.487s7.022 11.703 25.6 17.261c-4.388 5.56-9.801 12.142-9.801 12.142-32.33-1.024-44.617-22.235-44.617-22.235 0-47.104 21.065-85.285 21.065-85.285 21.065-15.799 41.106-15.36 41.106-15.36l1.463 1.756C80.75 77.53 68.608 89.088 68.608 89.088s3.218-1.755 8.63-4.242c15.653-6.876 28.088-8.777 33.208-9.216.877-.147 1.609-.293 2.487-.293a123.776 123.776 0 0 1 29.55-.292c13.896 1.609 28.818 5.705 44.031 14.043 0 0-11.556-10.971-36.425-18.578l2.048-2.34s20.041-.44 41.106 15.36c0 0 21.066 38.18 21.066 85.284 0 0-12.435 21.211-44.764 22.235zm-68.023-68.316c-8.338 0-14.92 7.314-14.92 16.237 0 8.924 6.728 16.238 14.92 16.238 8.339 0 14.921-7.314 14.921-16.238.147-8.923-6.582-16.237-14.92-16.237m53.394 0c-8.339 0-14.922 7.314-14.922 16.237 0 8.924 6.73 16.238 14.922 16.238 8.338 0 14.92-7.314 14.92-16.238 0-8.923-6.582-16.237-14.92-16.237\"\n                    />\n                </svg>\n            );\n            break;\n        case 'Github':\n            iconContent = (\n                <svg\n                    viewBox=\"0 0 512 512\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    strokeLinejoin=\"round\"\n                    strokeMiterlimit=\"2\"\n                >\n                    <path\n                        className=\"metasolFill\"\n                        d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\"\n                    />\n                </svg>\n            );\n            break;\n        case 'Blog':\n            iconContent = (\n                <svg\n                    viewBox=\"0 0 512 512\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    strokeLinejoin=\"round\"\n                    strokeMiterlimit=\"2\"\n                >\n                    <path\n                        className=\"metasolFill\"\n                        d=\"M511 256a255 255 0 10-255 255c141 0 255-114 255-255zm-229 0c0 63-51 114-113 114S56 319 56 256s51-114 113-114 113 51 113 114zm123 0c0 59-25 107-56 107s-56-48-56-107 25-107 56-107 56 48 56 107zm51 0c0 53-9 96-20 96s-20-43-20-96 9-96 20-96 20 43 20 96z\"\n                    />\n                </svg>\n            );\n            break;\n        default:\n    }\n    return (\n        <Box w={size || '25px'} h={size || '25px'} borderRadius=\"100%\">\n            <Box className=\"socialIcon\">{iconContent}</Box>\n        </Box>\n    );\n}\n\nfunction SocialLinks({ size, spacing, ...rest }) {\n    return (\n        <HStack spacing={spacing || 10} {...rest}>\n            {socialLinkItems.map(item => (\n                <ExternalLink\n                    href={item.url}\n                    key={item.url}\n                >\n                    <Icon name={item.name} className=\"socialIcon\" size={size || 30} />\n                </ExternalLink>\n            ))}\n        </HStack>\n    );\n}\n\nexport default SocialLinks;\n","export const navItems = [\n    {\n        name: 'Discord',\n        url: 'https://discord.gg/invite/EWmMMHT7Qy',\n        categories: ['social'],\n        isExternal: true,\n    },\n    {\n        name: 'Twitter',\n        url: 'https://twitter.com/sol_meta',\n        categories: ['social'],\n        isExternal: true,\n    },\n    {\n        name: 'Github',\n        url: 'https://github.com/metasol',\n        categories: ['social'],\n        isExternal: true,\n    },\n    {\n        name: 'Blog',\n        url: 'https://medium.com/@metasol',\n        categories: ['social'],\n        headerNav: true,\n        isExternal: true,\n    },\n];\n","import { useEffect, useState } from \"react\";\nimport styled from 'styled-components';\n\nconst BetaMessage = styled.div`\n  cursor: pointer;\n  flex: 1 0 auto;\n  align-items: center;\n  position: relative;\n  padding: 0.5rem 1rem;\n  padding-right: 2rem;\n  border-radius: 2rem;\n  font-size: 0.75rem;\n  line-height: 1rem;\n  text-align: left;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  &:after {\n    content: '✕';\n    top: 0.5rem;\n    right: 1rem;\n    position: absolute;\n  }\n`\n\nexport default function BetaWarning() {\n    const [showBetaMessage, setShowBetaMessage] = useState(true);\n\n    const handleDisableBetaMsg = () => {\n        localStorage.setItem(\"beta-disabled\", true);\n        setShowBetaMessage(false);\n    }\n\n    useEffect(() => {\n        const result = localStorage.getItem(\"beta-disabled\");\n        if (Boolean(result)) {\n            setShowBetaMessage(false);\n        }\n    }, []);\n\n    return (\n        <div id=\"mainInput\" style={{ marginBottom: \"1rem\", border: \"0px\" }}>\n            {showBetaMessage && (\n                <BetaMessage className=\"warning-box\" onClick={handleDisableBetaMsg}>\n                    <span role=\"img\" aria-label=\"warning\">\n                        💀\n                    </span>{' '}\n                    <span style={{ marginLeft: \"0.3rem\" }}>\n                        This project is unaudited. Use at your own risk.\n                    </span>\n                </BetaMessage>\n            )}\n        </div>\n    )\n}","import { Box } from '@chakra-ui/layout'\nimport styled from 'styled-components'\n\nconst Row = styled(Box)`\n  width: ${({ width }) => width ?? '100%'};\n  display: flex;\n  padding: 0;\n  align-items: ${({ align }) => align ?? 'center'};\n  justify-content: ${({ justify }) => justify ?? 'flex-start'};\n  padding: ${({ padding }) => padding};\n  border: ${({ border }) => border};\n  border-radius: ${({ borderRadius }) => borderRadius};\n`\n\nexport const RowBetween = styled(Row)`\n  justify-content: space-between;\n`\n\nexport const RowFlat = styled.div`\n  display: flex;\n  align-items: flex-end;\n`\n\nexport const AutoRow = styled(Row)`\n  flex-wrap: wrap;\n  margin: ${({ gap }) => gap && `-${gap}`};\n  justify-content: ${({ justify }) => justify && justify};\n\n  & > * {\n    margin: ${({ gap }) => gap} !important;\n  }\n`\n\nexport const RowFixed = styled(Row)`\n  width: fit-content;\n  margin: ${({ gap }) => gap && `-${gap}`};\n`\n\nexport default Row\n","import { React, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoColumn } from '../Column'\nimport { RowBetween } from '../Row'\nimport { TokenListProvider } from '@solana/spl-token-registry';\nimport { Dropdown, Image, DropdownButton } from 'react-bootstrap'\nimport { getChainId } from '../../utils/mics'\nimport { fee, network } from '../../utils/constants'\nimport {\n    getTokenBalance,\n    getTokenAccounts,\n    getAssociatedTokenAddress,\n    calculateFeeInSol,\n    getFeeInToken,\n} from '../../utils/api'\nimport BigNumber from 'bignumber.js';\nimport { useRouteMatch } from 'react-router-dom';\n\nconst defaultURI = \"https://cryptologos.cc/logos/solana-sol-logo.png\";\n\nconst LabelRow = styled.div`\n  display: flex;\n  flex-flow: row-reverse wrap;\n  align-items: center;\n  span:hover {\n    cursor: pointer;\n    color: gray;\n  }\n`\n\nexport default function FeeInputPanel({\n    connection,\n    account,\n    onSelectToken,\n    onTokenBalance,\n    onTransactionFee,\n    onError,\n    recipient,\n    amount,\n    tokenAddress,\n    onSetNoFeeTokenAccount,\n    onSetSenderFeeTokenAccount,\n    transactionFee,\n    updateTxFee,\n    onTxFeeUpdate,\n    updateFeeTokenBalance,\n    onFeeTokenBalanceUpdate,\n}) {\n    const match = useRouteMatch();\n    const [allTokens, setAllTokens] = useState([\n        {\n            decimals: 6,\n            symbol: \"USDC\",\n            address: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n            extensions: {\n                coingeckoId: \"usd-coin\"\n            },\n            logoURI: \"https://cdn.jsdelivr.net/gh/solana-labs/token-list@main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png\",\n        },\n        // {\n        //     decimals: 6,\n        //     symbol: \"PAI\",\n        //     address: \"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\",\n        //     extensions: {\n        //         coingeckoId: \"usd-coin\"\n        //     },\n        //     logoURI: \"https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS/logo.svg\",\n        // }, \n        {\n            decimals: 6,\n            symbol: \"USDT\",\n            address: \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\",\n            extensions: {\n                coingeckoId: \"tether\"\n            },\n            logoURI: \"https://cdn.jsdelivr.net/gh/solana-labs/explorer/public/tokens/usdt.svg\",\n        },\n    ]);\n\n    const [totalTransactionFee, setTotalTransactionFee] = useState(\"\");\n    const [transactionFeeInUsd, setTransactionFeeInUsd] = useState(\"\");\n    const [selectedTokenBalance, setSelectedTokenBalance] = useState(\"\");\n    const [selectedTokenSymbol, setSelectedTokenSymbol] = useState(\"Select a token\");\n    const [selectedTokenInfo, setSelectedTokenInfo] = useState();\n    const [defaultFeeToken, setDefaultFeeToken] = useState(\"\");\n\n    const handleSelectToken = async (event) => {\n        const data = allTokens.filter((element) => {\n            return element.address === event\n        });\n        const tokenInfo = data[0];\n\n        onSelectToken(data[0]);\n        setSelectedTokenSymbol(data[0].symbol);\n\n        if (account) {\n            const addresses = await getTokenAccounts(\n                connection, tokenInfo.address, account\n            );\n\n            if (addresses && addresses.length > 0) {\n                let tokenAccount = addresses[0].pubkey;\n\n                if (addresses.length > 1) {\n                    const assTokenAccount = await getAssociatedTokenAddress(\n                        tokenInfo.address, account\n                    );\n\n                    for (let i = 0; i < addresses.length; i++) {\n                        if (addresses[i].pubkey === assTokenAccount) {\n                            tokenAccount = assTokenAccount;\n                            break;\n                        }\n                    }\n                }\n\n                const balance = await getTokenBalance(\n                    connection, tokenAccount\n                );\n\n                setSelectedTokenBalance(balance.value.uiAmount);\n                onTokenBalance(balance.value.uiAmount);\n                onSetSenderFeeTokenAccount(tokenAccount);\n\n                fetchAndUpdateTransactionFee(tokenInfo);\n                setSelectedTokenInfo(tokenInfo);\n                onFeeTokenBalanceUpdate();\n                updateDefaultFeeToken(event);\n\n                // const transactionFee = await calculateFeeInSol(connection, 2);\n                // const txFee = await getFeeInToken(\n                //     tokenInfo.extensions.coingeckoId,\n                //     tokenInfo.decimals,\n                //     transactionFee,\n                // );\n\n                // const totalFee = txFee.uiAmount.plus(\n                //     txFee.uiAmount\n                //         .multipliedBy(new BigNumber(fee))\n                //         .dividedBy(100)\n                // );\n\n                // onTransactionFee(totalFee);\n                // setTotalTransactionFee(totalFee.toFixed(5));\n                // setTransactionFeeInUsd(txFee.uiAmountUsd);\n            } else {\n                onSetNoFeeTokenAccount();\n                onError(\"You don't have token account for fee token.\")\n                setSelectedTokenBalance(\"\");\n                setTotalTransactionFee(\"\");\n                setTransactionFeeInUsd(\"\");\n            }\n        }\n    }\n\n    const fetchTokenList = () => {\n        const chainId = getChainId(network);\n        new TokenListProvider().resolve().then(async (tokens) => {\n            const tokenList = tokens.filterByChainId(chainId).getList();\n            setAllTokens(allTokens.concat(tokenList));\n        });\n    }\n\n    const fetchAndUpdateTransactionFee = async (tokenInfo) => {\n        const executionFee = await calculateFeeInSol(connection, 2);\n        const txFee = await getFeeInToken(\n            tokenInfo.extensions.coingeckoId,\n            tokenInfo.decimals,\n            executionFee + transactionFee,\n        );\n\n        const totalFee = txFee.uiAmount.plus(\n            txFee.uiAmount\n                .multipliedBy(new BigNumber(fee))\n                .dividedBy(100)\n        );\n\n        const totalFeeInUsd = new BigNumber(txFee.uiAmountUsd)\n            .plus(\n                new BigNumber(txFee.uiAmountUsd)\n                    .multipliedBy(new BigNumber(fee))\n                    .dividedBy(100)\n            );\n\n        onTransactionFee(totalFee);\n        setTotalTransactionFee(totalFee.toFixed(5));\n        setTransactionFeeInUsd(totalFeeInUsd.toFixed(5));\n\n        if (updateTxFee) {\n            onTxFeeUpdate();\n        }\n    }\n\n    const fetchDefaultFeeToken = () => {\n        const defaultToken = localStorage.getItem(\"fee-token\");\n        let feeTokenAddress = \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\";\n\n        if (defaultToken && defaultToken !== \"\") {\n            feeTokenAddress = defaultToken;\n        }\n\n        handleSelectToken(feeTokenAddress);\n        setDefaultFeeToken(feeTokenAddress);\n    }\n\n    const updateDefaultFeeToken = (address) => {\n        if (defaultFeeToken.toLowerCase() !== address.toLowerCase()) {\n            localStorage.setItem(\"fee-token\", address);\n            setDefaultFeeToken(address);\n        }\n    }\n\n    const fetchAndSetDefaultFeeToken = () => {\n        if (match.params && match.params.feeToken) {\n            const feeToken = match.params.feeToken;\n            const token = allTokens.filter((element) => {\n                return element.symbol.toLowerCase() === feeToken.toLowerCase()\n            });\n\n            if (token.length > 0) {\n                updateDefaultFeeToken(token[0].address);\n            }\n        }\n    }\n\n    useEffect(() => {\n        fetchAndSetDefaultFeeToken();\n\n        if (account) {\n            fetchDefaultFeeToken();\n        }\n\n        if (allTokens.length === 0) {\n            fetchTokenList();\n        }\n\n        if (updateTxFee) {\n            fetchAndUpdateTransactionFee(selectedTokenInfo);\n        }\n\n        if (updateFeeTokenBalance) {\n            handleSelectToken(selectedTokenInfo.address)\n        }\n        // eslint-disable-next-line\n    }, [account, updateTxFee, updateFeeTokenBalance]);\n\n    return (\n        <>\n            {account && recipient && amount && tokenAddress ?\n                <div id=\"mainInput\">\n                    <div className=\"input-container\">\n                        <AutoColumn gap=\"md\">\n                            <LabelRow>\n                                <RowBetween>\n                                    <div\n                                        fontWeight={500}\n                                        fontSize={14}\n                                    >\n                                        Fee Token\n                                    </div>\n\n                                    {account && (\n                                        <div\n                                            color=\"rgb(86, 90, 105)\"\n                                            fontWeight={500}\n                                            fontSize={14}\n                                            style={{ display: 'inline', cursor: 'pointer' }}\n                                        >\n                                            {selectedTokenBalance !== \"\"\n                                                ? 'Balance: ' + selectedTokenBalance.toFixed(3)\n                                                : ' -'\n                                            }\n                                        </div>\n                                    )}\n                                </RowBetween>\n                            </LabelRow>\n\n                            <LabelRow>\n                                <RowBetween>\n                                    <div>\n                                        {totalTransactionFee ?\n                                            <span>\n                                                {totalTransactionFee}\n                                                <span> ($ {transactionFeeInUsd})</span>\n                                            </span>\n                                            : ' -'\n                                        }\n                                    </div>\n                                    <DropdownButton\n                                        title={selectedTokenSymbol}\n                                        onSelect={(e) => handleSelectToken(e)}\n                                    >\n                                        {allTokens.map((element, key) => (\n                                            element.symbol !== \"SOL\" ? (\n                                                <Dropdown.Item\n                                                    key={key}\n                                                    eventKey={element.address}\n                                                >\n                                                    <Image\n                                                        width=\"20px\"\n                                                        src={\n                                                            element.logoURI ?\n                                                                element.logoURI :\n                                                                defaultURI\n                                                        }\n                                                        style={{ marginRight: \"20px\" }}\n\n                                                    />\n                                                    {element.symbol}\n                                                </Dropdown.Item>\n                                            ) : null\n                                        ))}\n                                    </DropdownButton>\n                                </RowBetween>\n                            </LabelRow>\n\n                            <LabelRow>\n                                <RowBetween>\n\n                                </RowBetween>\n                            </LabelRow>\n                        </AutoColumn>\n                    </div>\n                </div >\n                : null\n            }\n        </>\n    )\n}","import { React } from 'react'\nimport styled from 'styled-components'\n\nconst Input = styled.input`\n  font-size: 1.25rem;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  width: 0;\n  transition: color 300ms step-start;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  width: 100%;\n  ::placeholder {\n    color: #656979;\n  }\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n`\n\nexport default function NumericInput({\n    value,\n    onChange\n}) {\n    const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`);\n\n    function escapeRegExp(string) {\n        return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n    }\n\n    const enforcer = (nextUserInput) => {\n        if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n            onChange(nextUserInput)\n        }\n    }\n\n    return (\n        <Input\n            className=\"input-panel\"\n            value={value}\n            onChange={event => {\n                enforcer(event.target.value.replace(/,/g, '.'))\n            }}\n            // universal input options\n            inputMode=\"decimal\"\n            title=\"Token Amount\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            // text-specific options\n            type=\"text\"\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\n            placeholder='0.0'\n            minLength={1}\n            maxLength={79}\n            spellCheck=\"false\"\n        />\n    )\n}\n","import { React, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Modal, Image, DropdownButton } from 'react-bootstrap';\nimport { TokenListProvider } from '@solana/spl-token-registry';\n\nimport { RowBetween } from '../Row';\nimport { AutoColumn } from '../Column';\nimport NumericInput from '../NumericInput';\nimport { network } from '../../utils/constants';\nimport { getChainId, getSplTokenAccount } from '../../utils/mics';\nimport { getTokenBalance, getAmountInUsd } from '../../utils/api';\nconst defaultURI = \"https://cryptologos.cc/logos/solana-sol-logo.png\";\n\nconst LabelRow = styled.div`\n  display: flex;\n  flex-flow: row-reverse wrap;\n  align-items: center;\n  span:hover {\n    cursor: pointer;\n    color: gray;\n  }\n`\n\nconst Input = styled.input`\n  font-size: 1rem;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  transition: color 300ms step-start;\n  color: rgb(240, 240, 255);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  width: 100%;\n  ::placeholder {\n    color: #656979;\n  }\n  padding: 0px;\n`\n\nexport default function AmountInputPanel({\n    connection,\n    account,\n    value,\n    onChangeAmount,\n    onSelectToken,\n    onTokenBalance,\n    onSetNoTokenAccount,\n    onError,\n    updateBalance,\n    updatedAddress,\n    setBalanceUpdated,\n    onSenderSplTokenAccount,\n}) {\n    const [allTokens, setAllTokens] = useState([]);\n    const [ownTokensList, setOwnTokensList] = useState([]);\n    const [filteredTokens, setFilteredTokens] = useState([]);\n\n    const [openSelectTokenModal, setOpenSelectTokenModal] = useState(false);\n    const [inputAmount, setInputAmount] = useState(\"\");\n    const [amountInUsd, setAmountInUsd] = useState(\"\");\n    const [selectedCurrencyBalance, setSelectedCurrencyBalance] = useState(\"\");\n    const [selectedTokenSymbol, setSelectedTokenSymbol] = useState(\"USDC\");\n    const [selectedTokenCoingeckoId, setSelectedCoingeckoId] = useState(\"\");\n    const [isUserSplTokenListUpdated, setIsUserSplTokenListUpdated] = useState(false);\n\n    const [tokenMap, setTokenMap] = useState(new Map());\n\n    const handleSelectToken = async (event, isUpdate) => {\n        handleModalClose();\n\n        let data = [];\n        if (account) {\n            data = ownTokensList.filter((element) => {\n                return element.address === event\n            });\n        }\n\n        if (data.length === 0) {\n            data = allTokens.filter((element) => {\n                return element.address === event\n            });\n        }\n\n        const tokenInfo = data[0];\n\n        onSelectToken(tokenInfo);\n        setSelectedTokenSymbol(tokenInfo.symbol);\n        setSelectedCoingeckoId(tokenInfo.extensions.coingeckoId);\n\n        if (account) {\n            let userSplTokenAccount = tokenInfo.userAccount;\n\n            if (!isUserSplTokenListUpdated) {\n                userSplTokenAccount = await getSplTokenAccount(\n                    connection,\n                    tokenInfo.address,\n                    account,\n                );\n            }\n\n            if (userSplTokenAccount) {\n                onSenderSplTokenAccount(userSplTokenAccount);\n\n                const balance = await getTokenBalance(\n                    connection, userSplTokenAccount\n                );\n\n                setSelectedCurrencyBalance(balance.value.uiAmount);\n                onTokenBalance(balance.value.uiAmount);\n\n                if (inputAmount && !isUpdate) {\n                    handleOnChangeAmount(\n                        inputAmount,\n                        data[0].extensions.coingeckoId\n                    );\n                } else if (isUpdate) {\n                    handleOnChangeAmount(\"\");\n                }\n            } else {\n                onSetNoTokenAccount();\n                onError(\"You don't have token account for selected token.\")\n                setSelectedCurrencyBalance(\"\");\n            }\n        }\n    }\n\n    const fetchTokenList = async () => {\n        const chainId = getChainId(network);\n\n        new TokenListProvider().resolve().then(tokens => {\n            const tokenList = tokens.filterByChainId(chainId).getList();\n\n            setTokenMap(tokenList.reduce((map, item) => {\n                map.set(item.address, item);\n                return map;\n            }, new Map()));\n        });\n\n        new TokenListProvider().resolve().then(async (tokens) => {\n            const tokenList = tokens.filterByChainId(chainId).getList();\n            setAllTokens(allTokens.concat(tokenList));\n            const mainTokens = allTokens.concat(tokenList).slice(0, 15);\n            setFilteredTokens(mainTokens);\n            setOwnTokensList(mainTokens);\n        });\n    }\n\n    const fetchUserSplTokenAccounts = async () => {\n        const result = await connection\n            .getParsedTokenAccountsByOwner(\n                new PublicKey(account),\n                { programId: TOKEN_PROGRAM_ID },\n                'recent',\n            );\n\n        const allTokenAccounts = result.value;\n\n        const tempTokenAccounts = [];\n        for (let i = 0; i < allTokenAccounts.length; i++) {\n            const tokenMint = allTokenAccounts[i].account\n                .data.parsed.info.mint;\n\n            const tokenData = tokenMap.get(tokenMint);\n            tokenData.userAccount = allTokenAccounts[i].pubkey;\n\n            tempTokenAccounts.push(tokenData);\n\n            if (i === allTokenAccounts.length - 1) {\n                setFilteredTokens(tempTokenAccounts);\n                setOwnTokensList(tempTokenAccounts);\n                setIsUserSplTokenListUpdated(true);\n            }\n        }\n    }\n\n    const onClickMax = () => {\n        handleOnChangeAmount(selectedCurrencyBalance);\n    }\n\n    const handleOnChangeAmount = async (amount, coingeckoId) => {\n        onChangeAmount(amount);\n        setInputAmount(amount);\n\n        coingeckoId = coingeckoId || selectedTokenCoingeckoId;\n\n        if (!amount) {\n            setAmountInUsd(\"\");\n        } else if (coingeckoId) {\n            setAmountInUsd(await getAmountInUsd(\n                coingeckoId,\n                amount,\n            ));\n        }\n    };\n\n    const handleModalClose = () => {\n        setOpenSelectTokenModal(false);\n        setFilteredTokens(ownTokensList);\n    }\n\n    const handleSearchBar = (e) => {\n        let currentList = [];\n        let newList = [];\n\n        if (e.target.value !== \"\") {\n            currentList = allTokens;\n\n            newList = currentList.filter(item => {\n                const v1 = item.symbol.toLocaleLowerCase();\n                const v2 = item.name.toLocaleLowerCase();\n                const v3 = item.address.toLocaleLowerCase();\n\n                const filter = e.target.value.toLocaleLowerCase();\n\n                return v1.includes(filter) || v2.includes(filter) || v3.includes(filter);\n            });\n        } else {\n            newList = ownTokensList;\n        }\n\n        setFilteredTokens(newList);\n    }\n\n    const handleDefaultSelect = () => {\n        handleSelectToken(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\", true);\n    }\n\n    useEffect(() => {\n        if (account) {\n            handleDefaultSelect();\n        }\n\n        if (allTokens.length === 0) {\n            fetchTokenList();\n        }\n\n        if (account) {\n            fetchUserSplTokenAccounts();\n        }\n\n        if (updateBalance) {\n            handleSelectToken(updatedAddress, true);\n            setBalanceUpdated();\n        }\n        // eslint-disable-next-line\n    }, [updateBalance, account]);\n\n    return (\n        <div id=\"mainInput\">\n            <div className=\"input-container\">\n                <AutoColumn gap=\"md\">\n                    <LabelRow>\n                        <RowBetween>\n                            <div\n                                fontWeight={500}\n                                fontSize={14}\n                            >\n                                Amount\n                            </div>\n\n                            {account && (\n                                <div\n                                    onClick={onClickMax}\n                                    color=\"rgb(86, 90, 105)\"\n                                    fontWeight={500}\n                                    fontSize={14}\n                                    style={{ display: 'inline', cursor: 'pointer' }}\n                                >\n                                    {selectedCurrencyBalance !== \"\"\n                                        ? 'Balance: ' + selectedCurrencyBalance.toFixed(3)\n                                        : ' -'\n                                    }\n                                </div>\n                            )}\n                        </RowBetween>\n                    </LabelRow>\n\n                    <LabelRow>\n                        <RowBetween>\n                            <NumericInput\n                                value={value}\n                                onChange={(value) => handleOnChangeAmount(value)}\n                            />\n\n                            <DropdownButton\n                                title={selectedTokenSymbol}\n                                onClick={() => setOpenSelectTokenModal(true)}\n                            >\n\n                            </DropdownButton>\n\n                            <Modal\n                                show={openSelectTokenModal}\n                                onHide={handleModalClose}\n                                animation={false}\n                                className=\"select-token-modal\"\n                            >\n                                <Modal.Header closeButton>\n                                    <Modal.Title>Choose Token</Modal.Title>\n                                </Modal.Header>\n                                <Modal.Body>\n                                    <div id=\"mainInput\" style={{ marginBottom: \"1rem\" }}>\n                                        <div className=\"input-container\">\n                                            <AutoColumn gap=\"md\">\n                                                <Input\n                                                    className=\"input-panel\"\n                                                    type=\"text\"\n                                                    placeholder=\"Search name or symbol or address\"\n                                                    onChange={handleSearchBar}\n                                                />\n                                            </AutoColumn>\n                                        </div>\n                                    </div>\n\n                                    {filteredTokens.map((element) => (\n                                        element.symbol !== \"SOL\" ? (\n                                            <div\n                                                className=\"modal-div\"\n                                                key={element.address}\n                                                onClick={() => handleSelectToken(element.address)}\n                                            >\n                                                <Image\n                                                    width=\"20px\"\n                                                    src={\n                                                        element.logoURI ?\n                                                            element.logoURI :\n                                                            defaultURI\n                                                    }\n                                                    style={{ marginRight: \"20px\" }}\n\n                                                />\n                                                <span\n                                                    style={{ fontSize: \"20px\" }}\n                                                >\n                                                    {element.symbol}\n                                                </span>\n                                            </div>\n                                        ) : null\n                                    ))}\n                                </Modal.Body>\n                            </Modal>\n                        </RowBetween>\n                    </LabelRow>\n\n                    <LabelRow>\n                        <RowBetween>\n                            <div>\n                                {amountInUsd ?\n                                    <span>\n                                        $\n                                        <span> {amountInUsd}</span>\n                                    </span>\n                                    : null\n                                }\n                            </div>\n                        </RowBetween>\n                    </LabelRow>\n                </AutoColumn>\n            </div>\n        </div >\n    )\n}","import { React, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { AutoColumn } from '../Column'\nimport { RowBetween } from '../Row'\n\nconst Input = styled.input`\n  font-size: 1.25rem;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  width: 0;\n  transition: color 300ms step-start;\n  color: rgb(240, 240, 255);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  width: 100%;\n  ::placeholder {\n    color: #656979;\n  }\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n`\n\nexport default function AddressInputPanel({\n    id,\n    value,\n    onChange\n}) {\n    const handleInput = useCallback(\n        event => {\n            const input = event.target.value\n            const withoutSpaces = input.replace(/\\s+/g, '')\n            onChange(withoutSpaces)\n        },\n        [onChange]\n    )\n\n    return (\n        <div id=\"mainInput\">\n            <div className=\"input-container input-panel-border\">\n                <AutoColumn gap=\"md\">\n                    <RowBetween>\n                        Recipient\n                    </RowBetween>\n                    <Input\n                        className=\"input-panel\"\n                        type=\"text\"\n                        autoComplete=\"off\"\n                        autoCorrect=\"off\"\n                        autoCapitalize=\"off\"\n                        spellCheck=\"false\"\n                        placeholder=\"Wallet Address\"\n                        pattern=\"^(0x[a-fA-F0-9]{40})$\"\n                        onChange={handleInput}\n                        value={value}\n                    />\n                </AutoColumn>\n            </div>\n        </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/solana-logo.88dd9cd2.png\";","import React from 'react';\n\nexport default function LightModeIcon() {\n  return (\n    <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M7 10.8008C9.09911 10.8008 10.8008 9.09911 10.8008 7C10.8008 4.90088 9.09911 3.19922 7 3.19922C4.90088 3.19922 3.19922 4.90088 3.19922 7C3.19922 9.09911 4.90088 10.8008 7 10.8008Z\" fill=\"#838A91\" />\n      <path d=\"M7 2.23242C7.22652 2.23242 7.41016 2.04878 7.41016 1.82227V0.410156C7.41016 0.18364 7.22652 0 7 0C6.77348 0 6.58984 0.18364 6.58984 0.410156V1.82227C6.58984 2.04878 6.77348 2.23242 7 2.23242Z\" fill=\"#838A91\" />\n      <path d=\"M13.59 6.58984H12.1779C11.9514 6.58984 11.7678 6.77348 11.7678 7C11.7678 7.22652 11.9514 7.41016 12.1779 7.41016H13.59C13.8165 7.41016 14.0002 7.22652 14.0002 7C14.0002 6.77348 13.8165 6.58984 13.59 6.58984Z\" fill=\"#838A91\" />\n      <path d=\"M7 11.7676C6.77348 11.7676 6.58984 11.9512 6.58984 12.1777V13.5898C6.58984 13.8164 6.77348 14 7 14C7.22652 14 7.41016 13.8164 7.41016 13.5898V12.1777C7.41016 11.9512 7.22652 11.7676 7 11.7676Z\" fill=\"#838A91\" />\n      <path d=\"M2.23242 7C2.23242 6.77348 2.04878 6.58984 1.82227 6.58984H0.410156C0.18364 6.58984 0 6.77348 0 7C0 7.22652 0.18364 7.41016 0.410156 7.41016H1.82227C2.04878 7.41016 2.23242 7.22652 2.23242 7Z\" fill=\"#838A91\" />\n      <path d=\"M10.661 3.74901C10.7659 3.74901 10.8709 3.70898 10.951 3.62886L11.9495 2.63035C12.1097 2.47017 12.1097 2.21049 11.9495 2.05031C11.7893 1.89013 11.5296 1.89013 11.3694 2.05031L10.3709 3.04882C10.2107 3.209 10.2107 3.46868 10.3709 3.62886C10.451 3.70898 10.556 3.74901 10.661 3.74901Z\" fill=\"#838A91\" />\n      <path d=\"M10.951 10.3711C10.7908 10.2109 10.5311 10.2109 10.3709 10.3711C10.2107 10.5313 10.2107 10.791 10.3709 10.9511L11.3695 11.9496C11.4496 12.0297 11.5545 12.0698 11.6595 12.0698C11.7644 12.0698 11.8694 12.0297 11.9495 11.9496C12.1097 11.7894 12.1097 11.5298 11.9495 11.3696L10.951 10.3711Z\" fill=\"#838A91\" />\n      <path d=\"M3.04888 10.3711L2.05037 11.3696C1.89019 11.5298 1.89019 11.7895 2.05037 11.9497C2.13046 12.0298 2.23543 12.0698 2.34038 12.0698C2.44532 12.0698 2.55032 12.0298 2.63039 11.9497L3.6289 10.9512C3.78908 10.791 3.78908 10.5313 3.6289 10.3711C3.46877 10.2109 3.20903 10.2109 3.04888 10.3711Z\" fill=\"#838A91\" />\n      <path d=\"M3.04891 3.62886C3.129 3.70895 3.23397 3.74901 3.33892 3.74901C3.44386 3.74901 3.54886 3.70898 3.62892 3.62886C3.7891 3.46868 3.7891 3.209 3.62892 3.04882L2.63041 2.05031C2.47026 1.89013 2.21055 1.89013 2.05037 2.05031C1.89019 2.21049 1.89019 2.47017 2.05037 2.63035L3.04891 3.62886Z\" fill=\"#838A91\" />\n      <path d=\"M8.82944 2.59691C8.88093 2.61829 8.93422 2.62841 8.9867 2.62841C9.14745 2.62841 9.30005 2.53328 9.3656 2.37553L9.9075 1.07156C9.99442 0.862385 9.89533 0.622334 9.68615 0.535409C9.477 0.44851 9.23695 0.547549 9.14999 0.756756L8.60809 2.06072C8.5212 2.26993 8.62029 2.50998 8.82944 2.59691Z\" fill=\"#838A91\" />\n      <path d=\"M13.2429 9.15007L11.9389 8.60817C11.7297 8.52125 11.4897 8.62031 11.4028 8.82952C11.3159 9.0387 11.415 9.27875 11.6241 9.36568L12.9281 9.90758C12.9796 9.92896 13.0329 9.93908 13.0854 9.93908C13.2461 9.93908 13.3987 9.84395 13.4643 9.6862C13.5512 9.47705 13.4521 9.237 13.2429 9.15007Z\" fill=\"#838A91\" />\n      <path d=\"M5.17072 11.4026C4.96151 11.3157 4.72149 11.4147 4.63457 11.6239L4.09267 12.9279C4.00574 13.1371 4.10484 13.3771 4.31401 13.4641C4.3655 13.4855 4.4188 13.4956 4.47127 13.4956C4.63202 13.4956 4.78463 13.4004 4.85017 13.2427L5.39207 11.9387C5.47897 11.7296 5.37987 11.4895 5.17072 11.4026Z\" fill=\"#838A91\" />\n      <path d=\"M0.756825 4.85003L2.06079 5.39192C2.11228 5.41331 2.16557 5.42342 2.21805 5.42342C2.3788 5.42342 2.53141 5.32829 2.59695 5.17055C2.68387 4.96137 2.58478 4.72132 2.3756 4.63439L1.07163 4.09252C0.862454 4.00565 0.622403 4.10469 0.535477 4.31387C0.448552 4.52305 0.547645 4.7631 0.756825 4.85003Z\" fill=\"#838A91\" />\n      <path d=\"M11.4068 5.18035C11.4721 5.33853 11.6249 5.4341 11.786 5.4341C11.8382 5.4341 11.8912 5.42409 11.9424 5.40296L13.2476 4.86409C13.457 4.77766 13.5567 4.53785 13.4702 4.32846C13.3838 4.11906 13.1439 4.01942 12.9346 4.10585L11.6294 4.64471C11.42 4.73117 11.3203 4.97098 11.4068 5.18035Z\" fill=\"#838A91\" />\n      <path d=\"M9.35484 11.6292C9.2684 11.4198 9.02855 11.3202 8.8192 11.4066C8.6098 11.4931 8.51014 11.7329 8.59657 11.9423L9.13543 13.2475C9.20076 13.4057 9.35361 13.5013 9.51472 13.5013C9.56686 13.5013 9.61988 13.4913 9.67107 13.4701C9.88047 13.3837 9.98013 13.1438 9.8937 12.9345L9.35484 11.6292Z\" fill=\"#838A91\" />\n      <path d=\"M2.59307 8.8192C2.50664 8.60983 2.26689 8.5101 2.05743 8.59659L0.752182 9.13546C0.542811 9.22189 0.443116 9.46169 0.529549 9.67109C0.594873 9.82927 0.747697 9.92484 0.908834 9.92484C0.960951 9.92484 1.014 9.91483 1.06519 9.8937L2.37044 9.35483C2.57984 9.26837 2.6795 9.02857 2.59307 8.8192Z\" fill=\"#838A91\" />\n      <path d=\"M4.64483 2.37057C4.71016 2.52875 4.86301 2.62432 5.02412 2.62432C5.07626 2.62432 5.12928 2.61431 5.18047 2.59317C5.38987 2.50674 5.48953 2.26694 5.4031 2.05754L4.86424 0.752284C4.77778 0.542886 4.53792 0.443245 4.3286 0.529679C4.1192 0.616112 4.01954 0.855944 4.10597 1.06532L4.64483 2.37057Z\" fill=\"#838A91\" />\n    </svg>\n  );\n}","import React from 'react';\n\nexport default function DarkModeIcon() {\n  return (\n    <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <mask id=\"path-1-inside-1\" fill=\"white\">\n        <path d=\"M1.00769 7.76601C0.795753 4.18171 3.45097 1.11019 6.93973 0.903907C7.89331 0.847524 8.80994 1.01159 9.64421 1.35294C7.55082 2.51304 6.19089 4.84582 6.3449 7.45043C6.49891 10.055 8.12426 12.2113 10.3399 13.1185C9.55154 13.5539 8.66063 13.8249 7.70705 13.8812C4.21829 14.0875 1.21962 11.3503 1.00769 7.76601Z\" />\n      </mask>\n      <path d=\"M8.38988 1.54633L29.8921 27.8837L85.7793 -17.7434L15.0151 -31.8019L8.38988 1.54633ZM9.07139 13.0724L19.5496 45.4175L88.2699 23.1556L27.32 -15.6154L9.07139 13.0724ZM8.979 35.393C6.69461 35.528 4.26387 35.3911 1.76467 34.8946L15.0151 -31.8019C11.5909 -32.4822 8.21038 -32.6804 4.96529 -32.4885L8.979 35.393ZM-13.1123 -24.791C-23.3391 -16.4417 -28.907 -3.65987 -28.1295 9.48884L39.7519 5.47513C40.2564 14.0068 36.665 22.3542 29.8921 27.8837L-13.1123 -24.791ZM-28.1295 9.48884C-27.3521 22.6376 -20.3167 34.6742 -9.17725 41.7601L27.32 -15.6154C34.6974 -10.9225 39.2474 -3.05657 39.7519 5.47513L-28.1295 9.48884ZM-1.4068 -19.2727C0.979995 -20.0459 3.36663 -20.4718 5.66778 -20.6078L9.68149 47.2736C12.9433 47.0808 16.2624 46.4824 19.5496 45.4175L-1.4068 -19.2727ZM5.66778 -20.6078C22.0832 -21.5784 34.6189 -8.87166 35.4821 5.7276L-32.3993 9.74131C-31.1487 30.8914 -13.1102 48.6213 9.68149 47.2736L5.66778 -20.6078ZM35.4821 5.7276C36.3454 20.3269 25.3944 34.4224 8.979 35.393L4.96529 -32.4885C-17.8263 -31.1408 -33.6499 -11.4088 -32.3993 9.74131L35.4821 5.7276ZM10.3399 13.1185L43.2188 72.6414L167.506 3.98823L36.1052 -49.8113L10.3399 13.1185ZM9.64421 1.35294L42.6049 60.8306L166.616 -7.89243L35.3949 -61.5827L9.64421 1.35294ZM2.92602 -66.9775C-39.7698 -64.453 -69.1995 -27.5539 -66.8738 11.7797L68.8891 3.7523C70.791 35.9173 46.6718 66.6734 10.9534 68.7853L2.92602 -66.9775ZM-66.8738 11.7797C-64.548 51.1134 -30.9751 84.2872 11.7208 81.7627L3.69334 -54.0002C39.4117 -56.1122 66.9873 -28.4127 68.8891 3.7523L-66.8738 11.7797ZM11.7208 81.7627C23.1208 81.0886 33.839 77.8225 43.2188 72.6414L-22.539 -46.4045C-14.7359 -50.7147 -5.79955 -53.4389 3.69334 -54.0002L11.7208 81.7627ZM36.1052 -49.8113C57.8606 -40.9039 72.8225 -20.3061 74.2263 3.43672L-61.5365 11.4641C-59.8247 40.4161 -41.6121 65.3266 -15.4254 76.0482L36.1052 -49.8113ZM74.2263 3.43672C75.6297 27.1705 63.2053 49.4145 42.6049 60.8306L-23.3164 -58.1247C-48.1036 -44.3885 -63.2479 -17.4789 -61.5365 11.4641L74.2263 3.43672ZM35.3949 -61.5827C25.4003 -65.6722 14.3288 -67.6518 2.92602 -66.9775L10.9534 68.7853C1.4578 69.3468 -7.78038 67.6953 -16.1065 64.2886L35.3949 -61.5827Z\" fill=\"white\" mask=\"url(#path-1-inside-1)\" />\n    </svg>\n  );\n}","import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport styles from '../../scss/DarkModeSwitch.module.scss';\nimport LightModeIcon from '../icons/LightModeIcon';\nimport DarkModeIcon from '../icons/DarkModeIcon';\n\nfunction DarkModeSwitch() {\n    const [mode, setMode] = useState('light');\n\n    const handleDarkMode = () => {\n        const currentMode = window.localStorage.getItem('mode');\n        const newMode = currentMode === 'light' ? 'dark' : 'light';\n        updateScss(newMode);\n        setMode(newMode);\n        window.localStorage.setItem('mode', newMode);\n    };\n\n    const updateScss = (mode) => {\n        const root = document.documentElement;\n        if (mode === \"light\") {\n            document.body.classList.add(`light-mode`);\n        } else {\n            document.body.classList.remove(`light-mode`);\n        }\n        root.style.setProperty(\n            '--sol-balance-background',\n            mode === \"light\" ? '#e6f5ff' : 'black'\n        );\n        root.style.setProperty(\n            '--input-panel-border',\n            mode === \"light\" ? '#F0F0FF' : '#222121'\n        );\n    }\n\n    useEffect(() => {\n        let currentMode = window.localStorage.getItem('mode');\n        updateScss(currentMode);\n        setMode(currentMode);\n    }, [mode]);\n\n    return (\n        <button type=\"button\" className={clsx(styles.root, { [styles.darkModeEnabled]: mode !== 'light' })} onClick={handleDarkMode}>\n            <div className={styles.track} />\n            <div className={styles.knob}>\n                <div className={styles.lightModeIcon}>\n                    <LightModeIcon />\n                </div>\n                <div className={styles.darkModeIcon}>\n                    <DarkModeIcon />\n                </div>\n            </div>\n        </button>\n    );\n}\n\nexport default DarkModeSwitch;","import React, { useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { Box } from '@chakra-ui/layout';\nimport { Connection, clusterApiUrl, PublicKey } from '@solana/web3.js';\nimport { Card, Row, Col, Button, Image } from 'react-bootstrap';\nimport {\n    network,\n    devnetUrl,\n    localnetUrl,\n    explorerLink,\n} from '../../utils/constants';\nimport Connect from '../Connect';\nimport { AutoColumn } from '../Column';\nimport SocialLinks from '../SocialLinks';\nimport BetaWarning from '../BetaWarning';\nimport FeeInputPanel from '../FeeInputPanel';\nimport AmountInputPanel from '../AmountInputPanel';\nimport AddressInputPanel from '../AddressInputPanel';\nimport { signAndSendTransaction, } from '../../utils/mics';\nimport { getSolBalance } from '../../utils/api';\nimport SolanaLogo from '../../assets/solana-logo.png';\nimport DarkModeSwitch from '../DarkModeSwitch/DarkModeSwitch';\n\nexport default function Main() {\n    const [connection] = useState(\n        new Connection(\n            network === \"devnet\" ?\n                devnetUrl :\n                (network === \"localnet\" ?\n                    localnetUrl :\n                    clusterApiUrl(network)\n                )\n        )\n    );\n\n    const [error, setError] = useState(\"\");\n    const [message, setMessage] = useState(\"\");\n\n    const [amount, setAmount] = useState(\"\");\n    const [recipient, setRecipient] = useState(\"\");\n    const [solBalance, setSolBalance] = useState(\"\");\n    const [tokenBalance, setTokenBalance] = useState(\"\");\n    const [solletWallet, setSollectWallet] = useState();\n\n    const [isConnected, setIsConnected] = useState(false);\n    const [walletAddress, setWalletAddress] = useState(\"\");\n    const [selectedTokenData, setSelectedTokenData] = useState({});\n    const [noTokenAccount, setNoTokenAccount] = useState(false);\n    const [noFeeTokenAccount, setNoFeeTokenAccount] = useState(false);\n    const [executing, setExecuting] = useState(false);\n    const [updateBalance, setUpdateBalance] = useState(false);\n    const [txSignature, setTxSignature] = useState(\"\");\n    const [openConnectModal, setOpenConnectModal] = useState(false);\n    const [transactionFee, setTransactionFee] = useState(\"\");\n    const [selectedFeeTokenData, setSelectedFeeTokenData] = useState({});\n    const [feeTokenBalance, setFeeTokenBalance] = useState(\"\");\n    const [senderFeeTokenAccount, setSenderFeeTokenAccount] = useState();\n    const [senderSplTokenAccount, setSenderSplTokenAccount] = useState();\n    const [updateTxFee, setUpdateTxFee] = useState(false);\n    const [updateFeeTokenBalance, setUpdateFeeTokenBalance] = useState(false);\n\n    const handleValidateAndTransfer = async () => {\n        let errorMsg = \"\";\n\n        try {\n            new PublicKey(recipient);\n\n            if (!selectedTokenData || !selectedTokenData.address) {\n                errorMsg = \"Please select the token.\";\n            } else if (amount === \"\" || Number(amount) <= 0) {\n                errorMsg = \"Amount can't be null or zero.\";\n            } else if (new BigNumber(amount).gt(new BigNumber(tokenBalance))) {\n                errorMsg = \"Amount should not be greater than available balance.\";\n            } else if (!selectedFeeTokenData || !selectedFeeTokenData.address) {\n                errorMsg = \"Please select the fee token.\";\n            } else if (transactionFee && transactionFee.gt(new BigNumber(feeTokenBalance))) {\n                errorMsg = \"Insufficient balance to cover transaction fee.\";\n            } else if (\n                selectedTokenData.address === selectedFeeTokenData.address &&\n                new BigNumber(amount).plus(transactionFee).gt(new BigNumber(tokenBalance))\n            ) {\n                errorMsg = \"Insufficient balance to cover transaction fee.\";\n            }\n            // else if (!createAccountAndSubmit) {\n            //     console.log(\"fejfenfnjef\")\n\n            //     const recipientSplAccount = await getSplTokenAccount(\n            //         connection,\n            //         selectedTokenData.address,\n            //         recipient,\n            //     );\n\n            //     if (\n            //         !recipientSplAccount\n            //         || recipientSplAccount.toString() === \"\"\n            //     ) {\n            //         const accountCreationCost =\n            //             await getAssociatedAccountCreationCost(connection);\n            //         console.log(accountCreationCost)\n            //         setTransactionFee(accountCreationCost);\n            //         setUpdateTxFee(true);\n\n            //         errorMsg = \"Recipient token account doesn't exists. You have too pay for recipient account creation.\";\n            //         setCreateAccountAndSubmit(true);\n            //     }\n            //     else {\n            //         handleTransferSplToken();\n            //     }\n            // }\n            else {\n                handleTransferSplToken();\n            }\n\n            handleError(errorMsg);\n        } catch (error) {\n            console.log(error)\n            errorMsg = \"Invalid recipient address.\";\n            handleError(errorMsg);\n        }\n    }\n\n    const handleTransferSplToken = () => {\n        setExecuting(true);\n\n        signAndSendTransaction(\n            connection,\n            solletWallet,\n            recipient,\n            amount,\n            selectedTokenData,\n            selectedFeeTokenData,\n            senderSplTokenAccount,\n            senderFeeTokenAccount,\n        )\n            .then((result) => {\n                setExecuting(false);\n                handleMesage(\n                    \"Transfer Submitted 🎉\",\n                    result.data.txSignature,\n                    false,\n                );\n\n                let interval = setInterval(async () => {\n                    let status = await connection.getSignatureStatus(\n                        result.data.txSignature\n                    );\n\n                    if (status.value?.confirmationStatus === \"finalized\") {\n                        setUpdateBalance(true);\n                        setAmount(\"\");\n                        setMessage(\"\");\n                        clearInterval(interval);\n                        setUpdateFeeTokenBalance(true);\n                    }\n                }, 1000)\n            })\n            .catch((error) => {\n                setExecuting(false);\n                handleError(error.message);\n            });\n    }\n\n    const handleChangeRecipient = (value) => {\n        setRecipient(value);\n        // if (createAccountAndSubmit) {\n        //     setCreateAccountAndSubmit(false);\n        //     setTransactionFee(0);\n        //     setUpdateTxFee(true);\n        // }\n    }\n\n    const handleChangeAmount = (value) => {\n        setAmount(value)\n    }\n\n    const handleSelectToken = (tokenData) => {\n        setSelectedTokenData(tokenData);\n    }\n\n    const handleSetTokenBalance = (value) => {\n        setTokenBalance(value);\n        setNoTokenAccount(false);\n    }\n\n    const handleSelectFeeToken = (tokenData) => {\n        setSelectedFeeTokenData(tokenData);\n    }\n\n    const handleSetFeeTokenBalance = (value) => {\n        setFeeTokenBalance(value);\n        setNoFeeTokenAccount(false);\n    }\n\n    const handleOpenConnectModal = () => {\n        if (!isConnected)\n            setOpenConnectModal(true);\n    }\n\n    const handleTransactionFee = (value) => {\n        setTransactionFee(value);\n    }\n\n    const handleOnWalletConnect = async (wallet) => {\n        setIsConnected(true);\n        setSollectWallet(wallet);\n        const publicKey = wallet.publicKey;\n        setWalletAddress(publicKey.toString());\n        console.log('Connected to ' + publicKey.toBase58())\n\n        const sol = await getSolBalance(connection, publicKey);\n        if (sol) {\n            setSolBalance(sol.uiBalance);\n        }\n\n        if (selectedTokenData && selectedTokenData.address) {\n            setUpdateBalance(true);\n        }\n    }\n\n    const handleOnWalletDisconnect = (wallet) => {\n        setIsConnected(false);\n        console.log('Wallet Disconnected');\n    }\n\n    const handleError = (message) => {\n        setError(message);\n\n        setTimeout(() => {\n            setError(\"\");\n        }, 4000);\n    }\n\n    const handleMesage = (\n        message,\n        signature,\n        enableTimeout,\n    ) => {\n        setMessage(message);\n\n        if (signature) {\n            setTxSignature(signature);\n        }\n\n        if (enableTimeout) {\n            setTimeout(() => {\n                setMessage(\"\");\n            }, !signature ? 4000 : 10000);\n        }\n    }\n\n    return (\n        <main className=\"homepage\">\n            {/* Navigation*/}\n            <nav className=\"navbar navbar-expand-lg navbar-light py-3\" id=\"mainNav\">\n                <div className=\"container\" style={{ marginTop: \"0.5rem\" }}>\n                    <div className=\"js-scroll-trigger logo\"></div>\n\n                    <div>\n                        <ul className=\"navbar-nav ml-auto my-2 my-lg-0\">\n                            {isConnected && solBalance !== \"\" ?\n                                <li className=\"nav-item\">\n                                    <div className=\"sol-balance\">\n                                        <span style={{ marginRight: \"5px\" }}>\n                                            {solBalance.toFixed(2)}\n                                        </span>\n                                        <Image width=\"20px\" src={SolanaLogo}></Image>\n                                    </div>\n                                </li>\n                                : null\n                            }\n\n                            <li className=\"nav-item\">\n                                <DarkModeSwitch />\n                            </li>\n\n                            <li className=\"nav-item\">\n                                <Button\n                                    variant=\"outline-success nav-button\"\n                                    onClick={handleOpenConnectModal}\n                                >\n                                    {!isConnected ?\n                                        <span>CONNECT</span> :\n                                        <a\n                                            className=\"nav-link\"\n                                            href={`${explorerLink}/address/${walletAddress}?cluster=${network}`}\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                        >\n                                            {walletAddress.substr(0, 4)}\n                                            ...\n                                            {walletAddress.substr(\n                                                walletAddress.length - 4,\n                                                walletAddress.length - 1,\n                                            )}\n                                        </a>\n                                    }\n                                </Button>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n\n            {/* Main*/}\n            <header className=\"homepage\" id=\"\">\n                <div className=\"container h-100\">\n                    <div className=\"row h-100 align-items-center justify-content-center text-center\">\n                        <BetaWarning />\n\n                        <Card>\n                            <Card.Body>\n                                <AutoColumn gap=\"20px\">\n                                    <AddressInputPanel\n                                        id=\"recipient\"\n                                        value={recipient}\n                                        onChange={handleChangeRecipient}\n                                    />\n\n                                    <AmountInputPanel\n                                        connection={connection}\n                                        account={walletAddress}\n                                        value={amount}\n                                        onChangeAmount={handleChangeAmount}\n                                        onSelectToken={handleSelectToken}\n                                        onTokenBalance={handleSetTokenBalance}\n                                        onSetNoTokenAccount={\n                                            () => {\n                                                setTokenBalance(\"\");\n                                                setNoTokenAccount(true);\n                                            }\n                                        }\n                                        onError={handleError}\n                                        updateBalance={updateBalance}\n                                        updatedAddress={selectedTokenData.address}\n                                        setBalanceUpdated={() => setUpdateBalance(false)}\n                                        onSenderSplTokenAccount={\n                                            (account) => {\n                                                setSenderSplTokenAccount(account);\n                                            }\n                                        }\n                                    />\n\n                                    <FeeInputPanel\n                                        connection={connection}\n                                        account={walletAddress}\n                                        onSelectToken={handleSelectFeeToken}\n                                        onTokenBalance={handleSetFeeTokenBalance}\n                                        onTransactionFee={handleTransactionFee}\n                                        onError={handleError}\n                                        recipient={recipient}\n                                        amount={amount}\n                                        tokenAddress={selectedTokenData.address}\n                                        onSetNoFeeTokenAccount={\n                                            () => {\n                                                setTokenBalance(\"\");\n                                                setNoFeeTokenAccount(true);\n                                            }\n                                        }\n                                        onSetSenderFeeTokenAccount={\n                                            (account) => {\n                                                setSenderFeeTokenAccount(account);\n                                            }\n                                        }\n                                        transactionFee={transactionFee}\n                                        updateTxFee={updateTxFee}\n                                        onTxFeeUpdate={() => setUpdateTxFee(false)}\n                                        updateFeeTokenBalance={updateFeeTokenBalance}\n                                        onFeeTokenBalanceUpdate={\n                                            () => {\n                                                setUpdateFeeTokenBalance(false);\n                                            }\n                                        }\n                                    />\n\n                                    {error ?\n                                        <div className=\"error-msg\">\n                                            {error}\n                                        </div>\n                                        : null\n                                    }\n\n                                    {message ?\n                                        <div className=\"message\">\n                                            {message}\n                                            <div>\n                                                {txSignature ?\n                                                    <div>\n                                                        <a\n                                                            href={`${explorerLink}/tx/${txSignature}?cluster=${network}`}\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                        >\n                                                            <strong>Click here</strong>\n                                                        </a>\n                                                        <span> to see tx execution on the solana explorer.</span>\n                                                    </div>\n                                                    : null\n                                                }\n                                            </div>\n                                        </div>\n                                        : null\n                                    }\n\n                                    <Row className=\"text-center\">\n                                        <Col>\n                                            {isConnected ? (\n                                                <Button\n                                                    onClick={handleValidateAndTransfer}\n                                                    variant=\"outline-success\"\n                                                    disabled={noTokenAccount || noFeeTokenAccount}\n                                                >\n                                                    {executing ?\n                                                        <div className=\"d-flex align-items-center\">\n                                                            Executing\n                                                            <span className=\"loading ml-2\"></span>\n                                                        </div>\n                                                        // : (createAccountAndSubmit ?\n                                                        //     <div>Create And Submit</div>\n                                                        : <div>Submit</div>\n                                                        // )\n                                                    }\n                                                </Button>\n                                            ) :\n                                                <Button\n                                                    onClick={handleOpenConnectModal}\n                                                    variant=\"outline-success\"\n                                                >\n                                                    <div>Connect Wallet</div>\n                                                </Button>\n                                            }\n                                        </Col>\n                                    </Row>\n                                </AutoColumn>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </div>\n            </header>\n\n            {/* Footer*/}\n            <footer className=\"py-5\">\n                <div className=\"container\">\n                    <Box\n                        maxW=\"containerLg\"\n                        color=\"white\" d=\"flex\"\n                        justifyContent=\"space-between\"\n                    >\n                        <div className=\"copyright\">\n                            Copyright © 2021 - MetaSol\n                        </div>\n                        <SocialLinks />\n                    </Box>\n                </div>\n            </footer>\n\n            {openConnectModal ?\n                <Connect\n                    onConnected={(wallet) => handleOnWalletConnect(wallet)}\n                    onDisconnected={handleOnWalletDisconnect}\n                    onClose={() => setOpenConnectModal(false)}\n                    onError={handleError}\n                /> : null\n            }\n        </main >\n    );\n}\n","import React from 'react';\nimport Main from './components/Main';\nimport { HashRouter, Route } from \"react-router-dom\";\n\nexport default function App() {\n    return (\n        <div id=\"app\">\n            <HashRouter basename=\"/\">\n                <Route exact path=\"/\" component={Main} />\n                <Route path=\"/:feeToken\" component={Main} />\n            </HashRouter>\n        </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ReactGA from 'react-ga';\nimport { config } from 'dotenv';\nimport './scss/styles.scss';\nimport reportWebVitals from './reportWebVitals';\n\nconfig();\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nReactGA.initialize(\n    process.env.REACT_APP_GOOGLE_ANALYTICS_ID\n);\n\nReactGA.pageview(\n    window.location.pathname + window.location.search\n);\n\nreportWebVitals();\n","import {\n    LAMPORTS_PER_SOL,\n    PublicKey,\n    SystemProgram,\n    SYSVAR_RENT_PUBKEY,\n    Transaction,\n    TransactionInstruction,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport ReactGA from 'react-ga';\nimport BigNumber from \"bignumber.js\";\nimport {\n    relayerUrl,\n    coingeckoApi,\n} from \"./constants\";\nimport {\n    Token,\n    TOKEN_PROGRAM_ID,\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\n\nexport const getSolBalance = (connection, account) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            let balance = await connection.getBalance(account, 'recent');\n            resolve({\n                balance,\n                uiBalance: balance / Math.pow(10, 9),\n            })\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\nexport const getTokenAccounts = (connection, mint, owner) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            let accounts = await connection.getTokenAccountsByOwner(\n                new PublicKey(owner),\n                { mint: new PublicKey(mint) },\n                'recent'\n            );\n\n            resolve(accounts.value);\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\nexport const getTokenBalance = (connection, tokenAccount) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            resolve(await connection\n                .getTokenAccountBalance(tokenAccount, 'recent'));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\nexport const calculateFeeInSol = (\n    connection,\n    totalSigners,\n) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const recentBlock = await connection.getRecentBlockhash('recent');\n\n            const feeCalulator = await connection\n                .getFeeCalculatorForBlockhash(recentBlock.blockhash, 'recent');\n\n            const lamportsPerSignature = feeCalulator.value\n                .lamportsPerSignature;\n\n            resolve(lamportsPerSignature * totalSigners);\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\nexport const getFeeInToken = (\n    name,\n    decimals,\n    feeInLamport,\n) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const result = await getTokenAndSolPrice(name);\n            const tokenPrice = result.tokenPriceInSol;\n            const solPriceInUsd = result.solPriceInUsd;\n\n            const oneLamportInSol = new BigNumber(1).dividedBy(LAMPORTS_PER_SOL);\n\n            const feeInSol = new BigNumber(feeInLamport).times(oneLamportInSol);\n            const feeInToken = tokenPrice.times(feeInSol);\n            const feeInUsd = feeInSol.times(solPriceInUsd);\n\n            resolve({\n                amount: feeInToken.times\n                    (\n                        new BigNumber(10)\n                            .exponentiatedBy(decimals)\n                    )\n                    .toFixed(0),\n                uiAmount: feeInToken,\n                uiAmountUsd: feeInUsd,\n            });\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\nconst getTokenAndSolPrice = (name) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const currentSolPrice = await getCurrentSolPrice();\n\n            const tokenPriceInUsd = await axios.get(\n                `${coingeckoApi}/simple/price?ids=${name}&vs_currencies=usd`\n            );\n\n            const usdPriceInToken = new BigNumber(1)\n                .dividedBy(new BigNumber(tokenPriceInUsd.data[name].usd));\n\n            resolve({\n                solPriceInUsd: currentSolPrice,\n                tokenPriceInSol: usdPriceInToken.times(currentSolPrice)\n            });\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n\nconst getCurrentSolPrice = () => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const res = await axios.get(\n                `${coingeckoApi}/simple/price?ids=solana&vs_currencies=usd`\n            );\n\n            resolve(new BigNumber(res.data.solana.usd));\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n\nexport const getAmountInUsd = (name, amount) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const res = await axios.get(\n                `${coingeckoApi}/simple/price?ids=${name}&vs_currencies=usd`\n            );\n\n            const tokenPriceInUsd = new BigNumber(res.data[name].usd);\n            const amountInUsd = new BigNumber(amount).times(tokenPriceInUsd);\n\n            resolve(amountInUsd.toFixed(4));\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n\nexport const sendToRelayer = (bufferTx) => {\n    return new Promise((resolve, reject) => {\n        axios.post\n            (\n                `${relayerUrl}/execute-tx`,\n                {\n                    bufferTx\n                }\n            )\n            .then((txSignature) => {\n                resolve(txSignature)\n            })\n            .catch((error) => {\n                reject(error);\n            })\n    });\n};\n\nexport const createAndSendTestTokens = (\n    mintAddress,\n    ownerAddress,\n) => {\n    return new Promise((resolve, reject) => {\n        axios.post\n            (\n                `${relayerUrl}/create-wallet`,\n                {\n                    mintAddress,\n                    ownerAddress,\n                }\n            )\n            .then((result) => {\n                resolve(result)\n\n                ReactGA.event({\n                    category: 'Wallet',\n                    action: 'Created',\n                });\n            })\n            .catch((error) => {\n                reject(error);\n            })\n    });\n};\n\nexport const getAssociatedAccountCreationCost = (connection) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            resolve(\n                await connection\n                    .getMinimumBalanceForRentExemption(165, 'recent')\n            );\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n\nexport const getAssociatedTokenAddress = (mint, owner) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            mint = new PublicKey(mint);\n            owner = new PublicKey(owner);\n\n            resolve(\n                await Token.getAssociatedTokenAddress(\n                    ASSOCIATED_TOKEN_PROGRAM_ID,\n                    TOKEN_PROGRAM_ID,\n                    mint,\n                    owner\n                )\n            );\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\nexport async function createAssociatedTokenAccount(\n    connection,\n    owner,\n    associatedAddress,\n    mint,\n    payer\n) {\n    return new Promise(async (resolve, reject) => {\n        try {\n            await connection.sendAndConfirmTransaction(\n                'CreateAssociatedTokenAccount',\n                connection,\n                new Transaction().add(\n                    createAssociatedTokenAccountInstruction(\n                        mint,\n                        associatedAddress,\n                        owner,\n                        payer.publicKey,\n                    ),\n                ),\n                payer,\n            );\n\n            resolve(true);\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\n/**\n * Construct the AssociatedTokenProgram instruction to create the associated\n * token account\n *\n * @param associatedProgramId SPL Associated Token program account\n * @param programId SPL Token program account\n * @param mint Token mint account\n * @param associatedAccount New associated account\n * @param owner Owner of the new account\n * @param payer Payer of fees\n */\nexport function createAssociatedTokenAccountInstruction(\n    mint,\n    associatedAccount,\n    owner,\n    payer,\n) {\n    const data = Buffer.alloc(0);\n\n    let keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedAccount, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: ASSOCIATED_TOKEN_PROGRAM_ID,\n        data,\n    });\n}\n","import {\n    PublicKey,\n    SYSVAR_CLOCK_PUBKEY,\n    Transaction,\n    TransactionInstruction,\n} from '@solana/web3.js';\nimport ReactGA from 'react-ga';\nimport BigNumber from 'bignumber.js';\nimport {\n    FEE_PAYER_PUBLIC_KEY,\n    METASOL_PROGRAM_ID,\n    processTxLayout,\n    METASOL_PUBLIC_KEY,\n    transferCheckedLayout,\n} from \"./constants\";\nimport { u64 } from './uint64';\nimport {\n    sendToRelayer,\n    getAssociatedTokenAddress,\n    calculateFeeInSol,\n    getFeeInToken,\n    getTokenAccounts,\n    getAssociatedAccountCreationCost,\n    createAssociatedTokenAccountInstruction,\n} from './api';\nimport {\n    TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\n\nexport const getChainId = (network) => {\n    let chainId = 0;\n\n    switch (network) {\n        case \"mainnet-beta\":\n            chainId = 101;\n            break;\n        case \"testnet\":\n            chainId = 102;\n            break;\n        case \"devnet\":\n            chainId = 103;\n            break;\n        default:\n            chainId = 102;\n            break;\n    }\n\n    return chainId;\n}\n\nexport const signAndSendTransaction = (\n    connection,\n    solletWallet,\n    recipient,\n    transferAmount,\n    selectedTokenData,\n    selectedFeeTokenData,\n    senderSplTokenAccount,\n    senderFeeTokenAccount,\n) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            let recipientSplAccount = await\n                getSplTokenAccount(\n                    connection,\n                    selectedTokenData.address,\n                    recipient,\n                );\n\n            // if (await isSplAccountExists(\n            //     connection,\n            //     recipientSplAccount,\n            // )) {\n            const mintPublicKey = new PublicKey(\n                selectedTokenData.address\n            );\n\n            const amount = Number(\n                new BigNumber(transferAmount).times(\n                    new BigNumber(10).exponentiatedBy(\n                        new BigNumber(selectedTokenData.decimals)\n                    )\n                )\n            );\n\n            const recentBlock = await connection\n                .getRecentBlockhash('recent');\n\n            const tempTransaction = new Transaction({\n                feePayer: FEE_PAYER_PUBLIC_KEY,\n                recentBlockhash: recentBlock.blockhash\n            });\n\n            let accountCreationCost = 0;\n            if (!recipientSplAccount || recipientSplAccount.toString() === \"\") {\n                recipientSplAccount = await getAssociatedTokenAddress(\n                    selectedTokenData.address, recipient,\n                );\n\n                accountCreationCost += await\n                    getAssociatedAccountCreationCost(connection);\n\n                const recipientSplAccountInstruction =\n                    createAssociatedTokenAccountInstruction(\n                        new PublicKey(selectedTokenData.address), // Token mint key\n                        recipientSplAccount, // Token account\n                        recipient, // Account Owner\n                        FEE_PAYER_PUBLIC_KEY, // Fee Payer\n                    );\n\n                tempTransaction.add(recipientSplAccountInstruction);\n            }\n\n            const transferInstruction =\n                createTransferCheckedInstruction(\n                    senderSplTokenAccount,\n                    mintPublicKey,\n                    recipientSplAccount,\n                    solletWallet.publicKey,\n                    [],\n                    amount,\n                    selectedTokenData.decimals\n                );\n\n            const transaction = await createMetasolTransaction(\n                connection,\n                tempTransaction,\n                transferInstruction,\n                solletWallet.publicKey,\n                selectedFeeTokenData,\n                senderFeeTokenAccount,\n                accountCreationCost,\n            );\n\n            const signedTx = await solletWallet\n                .signTransaction(transaction);\n\n            const bufferTx = signedTx.serialize({\n                verifySignatures: false\n            });\n\n            const result = await sendToRelayer(bufferTx);\n            resolve(result);\n\n            ReactGA.event({\n                category: 'Transfer',\n                action: 'Executed',\n                label: amount.toString(),\n            });\n            // } else {\n            //     reject(new Error(\"Receiver doesn't have token account !!\"));\n            // }\n        } catch (error) {\n            console.log(error)\n            reject(error);\n        }\n    });\n}\n\nconst createMetasolTransaction = async (\n    connection,\n    transaction,\n    txInstruction,\n    senderAuthority,\n    feeSplToken,\n    senderFeeTokenAccount,\n    accountCreationCost,\n) => {\n    const feeSplTokenAddress = feeSplToken.address;\n    const feePayerSplAccount = await getAssociatedTokenAddress(\n        feeSplTokenAddress, FEE_PAYER_PUBLIC_KEY.toString(),\n    );\n\n    const feeTokenPublicKey = new PublicKey(feeSplTokenAddress);\n\n    const metasolKeys = [\n        { pubkey: txInstruction.programId, isSigner: false, isWritable: false },\n        { pubkey: METASOL_PUBLIC_KEY, isSigner: false, isWritable: true },\n\n        { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n\n        { pubkey: senderFeeTokenAccount, isSigner: false, isWritable: true },\n        { pubkey: senderAuthority, isSigner: false, isWritable: false },\n        { pubkey: feePayerSplAccount, isSigner: false, isWritable: true },\n\n        { pubkey: feeTokenPublicKey, isSigner: false, isWritable: false },\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    const keys = txInstruction.keys.concat(metasolKeys);\n\n    const transactionFee = await calculateFeeInSol(connection, 2);\n\n    const txFee = await getFeeInToken(\n        feeSplToken.extensions.coingeckoId,\n        feeSplToken.decimals,\n        transactionFee + accountCreationCost,\n    );\n\n    const slot = await connection.getSlot('recent');\n\n    const data = Buffer.alloc(48);\n\n    processTxLayout.encode(\n        {\n            instruction: 1,\n            fee: new u64(txFee.amount).toBuffer(),\n            expiry_block: new u64(slot + 300).toBuffer(),\n            required_accounts_length: txInstruction.keys.length,\n            instruction_data: txInstruction.data,\n        },\n        data,\n    );\n\n    // if (\n    //     !await isSplAccountExists(\n    //         connection,\n    //         feePayerSplAccount,\n    //     )\n    // ) {\n    //     const feePayerAccountInstruction =\n    //         createAssociatedTokenAccountInstruction(\n    //             feeTokenPublicKey, // Token mint key\n    //             feePayerSplAccount, // Token account\n    //             FEE_PAYER_PUBLIC_KEY, // Owner\n    //             FEE_PAYER_PUBLIC_KEY, // Payer\n    //         );\n\n    //     transaction.add(feePayerAccountInstruction);\n    // }\n\n    const processTxInstruction = new TransactionInstruction({\n        keys,\n        programId: METASOL_PROGRAM_ID,\n        data,\n    });\n\n    transaction.add(processTxInstruction);\n\n    return transaction;\n}\n\nfunction createTransferCheckedInstruction(\n    source,\n    mint,\n    destination,\n    owner,\n    multiSigners,\n    amount,\n    decimals,\n) {\n    const data = Buffer.alloc(transferCheckedLayout.span);\n\n    transferCheckedLayout.encode(\n        {\n            instruction: 12, // TransferChecked instruction\n            amount: new u64(amount).toBuffer(),\n            decimals,\n        },\n        data,\n    );\n\n    let keys = [\n        { pubkey: source, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ];\n    if (multiSigners.length === 0) {\n        keys.push({\n            pubkey: owner,\n            isSigner: true,\n            isWritable: false,\n        });\n    } else {\n        keys.push({ pubkey: owner, isSigner: false, isWritable: false });\n        multiSigners.forEach((signer) =>\n            keys.push({\n                pubkey: signer.publicKey,\n                isSigner: true,\n                isWritable: false,\n            }),\n        );\n    }\n\n    return new TransactionInstruction({\n        keys,\n        programId: TOKEN_PROGRAM_ID,\n        data,\n    });\n}\n\nexport const getSplTokenAccount = (connection, mint, authority) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            let userSplTokenAccount;\n            const addresses = await getTokenAccounts(\n                connection, mint, authority\n            );\n\n            if (addresses && addresses.length > 0) {\n                userSplTokenAccount = addresses[0].pubkey;\n\n                if (addresses.length > 1) {\n                    const associatedTokenAddr = await\n                        getAssociatedTokenAddress(mint, authority);\n\n                    for (let i = 0; i < addresses.length; i++) {\n                        if (addresses[i].pubkey === associatedTokenAddr) {\n                            userSplTokenAccount = associatedTokenAddr;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            resolve(userSplTokenAccount);\n        } catch (error) {\n            reject(error)\n        }\n    })\n}\n\n// const isSplAccountExists = (connection, associatedAccount) => {\n//     return new Promise(async (resolve) => {\n//         try {\n//             await connection\n//                 .getTokenAccountBalance(associatedAccount);\n\n//             resolve(true);\n//         } catch {\n//             resolve(false);\n//         }\n//     })\n// }\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"DarkModeSwitch_root__1CLEN\",\"track\":\"DarkModeSwitch_track__1Tt5c\",\"knob\":\"DarkModeSwitch_knob__1GX3z\",\"lightModeIcon\":\"DarkModeSwitch_lightModeIcon__3yi30\",\"darkModeIcon\":\"DarkModeSwitch_darkModeIcon__1gMlP\",\"darkModeEnabled\":\"DarkModeSwitch_darkModeEnabled__a7HCP\"};"],"sourceRoot":""}